
Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec4  08003ec4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08003ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  200000a8  08003f74  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08003f74  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c27d  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dde  00000000  00000000  0002c355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252cf  00000000  00000000  0002f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c227  00000000  00000000  000543af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e519b  00000000  00000000  000605d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145771  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f2c  00000000  00000000  001457c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a8 	.word	0x200000a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003e78 	.word	0x08003e78

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000ac 	.word	0x200000ac
 8000204:	08003e78 	.word	0x08003e78

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_DMA_Init+0x48>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <MX_DMA_Init+0x48>)
 8000528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <MX_DMA_Init+0x48>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	203a      	movs	r0, #58	; 0x3a
 8000540:	f000 fd15 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000544:	203a      	movs	r0, #58	; 0x3a
 8000546:	f000 fd2e 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2046      	movs	r0, #70	; 0x46
 8000550:	f000 fd0d 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000554:	2046      	movs	r0, #70	; 0x46
 8000556:	f000 fd26 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x5c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <MX_GPIO_Init+0x5c>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_GPIO_Init+0x5c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <MX_GPIO_Init+0x5c>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_GPIO_Init+0x5c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fb73 	bl	8000cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f812 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f7ff ffc8 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d8:	f7ff ffa0 	bl	800051c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005dc:	f000 fa24 	bl	8000a28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sh_init(&huart1);
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <main+0x2c>)
 80005e2:	f000 f87d 	bl	80006e0 <sh_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sh_run();
 80005e6:	f000 f88f 	bl	8000708 <sh_run>
	  HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fbbf 	bl	8000d70 <HAL_Delay>
	  sh_run();
 80005f2:	e7f8      	b.n	80005e6 <main+0x1e>
 80005f4:	20000424 	.word	0x20000424

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fc2e 	bl	8003e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <SystemClock_Config+0xd4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xd4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <SystemClock_Config+0xd8>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000660:	2319      	movs	r3, #25
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000664:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800066e:	2309      	movs	r3, #9
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fa28 	bl	8001acc <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000682:	f000 f827 	bl	80006d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000686:	f001 f9d1 	bl	8001a2c <HAL_PWREx_EnableOverDrive>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000690:	f000 f820 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2106      	movs	r1, #6
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fcae 	bl	8002014 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006be:	f000 f809 	bl	80006d4 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <sh_init>:
static const char sh_new_line[] = "> ";
char sh_welcome_text[] = "\r\n***********************\r\n*                     *\r\n*     shell v0.2      *\r\n*     Sami Asfary     *\r\n*                     *\r\n***********************\r\n";

static h_shell_t h_shell;

void sh_init(UART_HandleTypeDef *huart){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	h_shell.function_count = 0;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <sh_init+0x24>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	h_shell.hal_huart = huart;
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <sh_init+0x24>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	200000c4 	.word	0x200000c4

08000708 <sh_run>:

void sh_run(){
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(h_shell.hal_huart, sh_welcome_text, strlen(sh_welcome_text), HAL_MAX_DELAY);
 800070e:	4b46      	ldr	r3, [pc, #280]	; (8000828 <sh_run+0x120>)
 8000710:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 8000714:	4845      	ldr	r0, [pc, #276]	; (800082c <sh_run+0x124>)
 8000716:	f7ff fd77 	bl	8000208 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	4942      	ldr	r1, [pc, #264]	; (800082c <sh_run+0x124>)
 8000724:	4620      	mov	r0, r4
 8000726:	f002 fa99 	bl	8002c5c <HAL_UART_Transmit>
	HAL_UART_Transmit(h_shell.hal_huart, sh_new_line, 2, HAL_MAX_DELAY);
 800072a:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <sh_run+0x120>)
 800072c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2202      	movs	r2, #2
 8000736:	493e      	ldr	r1, [pc, #248]	; (8000830 <sh_run+0x128>)
 8000738:	f002 fa90 	bl	8002c5c <HAL_UART_Transmit>

	char character[1];
	while(1){
		HAL_UART_Receive(h_shell.hal_huart, character, 1, HAL_MAX_DELAY);
 800073c:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <sh_run+0x120>)
 800073e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 8000742:	1d39      	adds	r1, r7, #4
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	2201      	movs	r2, #1
 800074a:	f002 fb0a 	bl	8002d62 <HAL_UART_Receive>
		switch(character[0]){
 800074e:	793b      	ldrb	r3, [r7, #4]
 8000750:	2b7f      	cmp	r3, #127	; 0x7f
 8000752:	d02c      	beq.n	80007ae <sh_run+0xa6>
 8000754:	2b7f      	cmp	r3, #127	; 0x7f
 8000756:	dc4a      	bgt.n	80007ee <sh_run+0xe6>
 8000758:	2b08      	cmp	r3, #8
 800075a:	d028      	beq.n	80007ae <sh_run+0xa6>
 800075c:	2b0d      	cmp	r3, #13
 800075e:	d146      	bne.n	80007ee <sh_run+0xe6>
		case '\r' :
			HAL_UART_Transmit(h_shell.hal_huart, "\r\n", 2, HAL_MAX_DELAY);
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <sh_run+0x120>)
 8000762:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2202      	movs	r2, #2
 800076c:	4931      	ldr	r1, [pc, #196]	; (8000834 <sh_run+0x12c>)
 800076e:	f002 fa75 	bl	8002c5c <HAL_UART_Transmit>
			h_shell.sh_cmd_current[h_shell.sh_line_ptr] = '\0';
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <sh_run+0x120>)
 8000774:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000778:	461a      	mov	r2, r3
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <sh_run+0x120>)
 800077c:	4413      	add	r3, r2
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			if(h_shell.sh_line_ptr != 0){
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <sh_run+0x120>)
 8000786:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <sh_run+0x8a>
				sh_command_resolve();
 800078e:	f000 f855 	bl	800083c <sh_command_resolve>
			}
			HAL_UART_Transmit(h_shell.hal_huart, sh_new_line, 2, HAL_MAX_DELAY);
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <sh_run+0x120>)
 8000794:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	2202      	movs	r2, #2
 800079e:	4924      	ldr	r1, [pc, #144]	; (8000830 <sh_run+0x128>)
 80007a0:	f002 fa5c 	bl	8002c5c <HAL_UART_Transmit>
			h_shell.sh_line_ptr = 0;
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <sh_run+0x120>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
			break;
 80007ac:	e03b      	b.n	8000826 <sh_run+0x11e>
		case '\b':
		case '\177':
			if(h_shell.sh_line_ptr != 0){
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <sh_run+0x120>)
 80007b0:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d035      	beq.n	8000824 <sh_run+0x11c>
				HAL_UART_Transmit(h_shell.hal_huart, sh_backspace, 3, HAL_MAX_DELAY);
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <sh_run+0x120>)
 80007ba:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2203      	movs	r2, #3
 80007c4:	491c      	ldr	r1, [pc, #112]	; (8000838 <sh_run+0x130>)
 80007c6:	f002 fa49 	bl	8002c5c <HAL_UART_Transmit>
				h_shell.sh_line_ptr--;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <sh_run+0x120>)
 80007cc:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <sh_run+0x120>)
 80007d6:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
				h_shell.sh_cmd_current[h_shell.sh_line_ptr] = '\0';
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <sh_run+0x120>)
 80007dc:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <sh_run+0x120>)
 80007e4:	4413      	add	r3, r2
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			}
			break;
 80007ec:	e01a      	b.n	8000824 <sh_run+0x11c>
		default :
			HAL_UART_Transmit(h_shell.hal_huart, character, 1, HAL_MAX_DELAY);
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <sh_run+0x120>)
 80007f0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 80007f4:	1d39      	adds	r1, r7, #4
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	2201      	movs	r2, #1
 80007fc:	f002 fa2e 	bl	8002c5c <HAL_UART_Transmit>
			h_shell.sh_cmd_current[h_shell.sh_line_ptr] = character[0];
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <sh_run+0x120>)
 8000802:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000806:	4619      	mov	r1, r3
 8000808:	793a      	ldrb	r2, [r7, #4]
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <sh_run+0x120>)
 800080c:	440b      	add	r3, r1
 800080e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			h_shell.sh_line_ptr++;
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <sh_run+0x120>)
 8000814:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000818:	3301      	adds	r3, #1
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <sh_run+0x120>)
 800081e:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
			break;
 8000822:	e000      	b.n	8000826 <sh_run+0x11e>
			break;
 8000824:	bf00      	nop
		HAL_UART_Receive(h_shell.hal_huart, character, 1, HAL_MAX_DELAY);
 8000826:	e789      	b.n	800073c <sh_run+0x34>
 8000828:	200000c4 	.word	0x200000c4
 800082c:	20000000 	.word	0x20000000
 8000830:	08003e98 	.word	0x08003e98
 8000834:	08003e90 	.word	0x08003e90
 8000838:	08003e94 	.word	0x08003e94

0800083c <sh_command_resolve>:

	}

}

void sh_command_resolve(){
 800083c:	b490      	push	{r4, r7}
 800083e:	b0cc      	sub	sp, #304	; 0x130
 8000840:	af00      	add	r7, sp, #0
	char i = 1, last_space=0, argc = 0;
 8000842:	2301      	movs	r3, #1
 8000844:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8000848:	2300      	movs	r3, #0
 800084a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 800084e:	2300      	movs	r3, #0
 8000850:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
	char argv[SH_ARGC_MAX][SH_COMMAND_LEN];
	while(h_shell.sh_cmd_current[i-1] != '\0'){
 8000854:	e058      	b.n	8000908 <sh_command_resolve+0xcc>
		if(h_shell.sh_cmd_current[i] == ' ' || h_shell.sh_cmd_current[i] == '\0'){
 8000856:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <sh_command_resolve+0xec>)
 800085c:	4413      	add	r3, r2
 800085e:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8000862:	2b20      	cmp	r3, #32
 8000864:	d007      	beq.n	8000876 <sh_command_resolve+0x3a>
 8000866:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800086a:	4a2f      	ldr	r2, [pc, #188]	; (8000928 <sh_command_resolve+0xec>)
 800086c:	4413      	add	r3, r2
 800086e:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8000872:	2b00      	cmp	r3, #0
 8000874:	d143      	bne.n	80008fe <sh_command_resolve+0xc2>
		for(char j = last_space; j < i; j++){
 8000876:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800087a:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 800087e:	e01c      	b.n	80008ba <sh_command_resolve+0x7e>
				argv[argc][j-last_space] = h_shell.sh_cmd_current[j];
 8000880:	f897 112c 	ldrb.w	r1, [r7, #300]	; 0x12c
 8000884:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
 8000888:	f897 012c 	ldrb.w	r0, [r7, #300]	; 0x12c
 800088c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000890:	1ac3      	subs	r3, r0, r3
 8000892:	4825      	ldr	r0, [pc, #148]	; (8000928 <sh_command_resolve+0xec>)
 8000894:	4401      	add	r1, r0
 8000896:	f891 4134 	ldrb.w	r4, [r1, #308]	; 0x134
 800089a:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800089e:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 80008a2:	2032      	movs	r0, #50	; 0x32
 80008a4:	fb00 f202 	mul.w	r2, r0, r2
 80008a8:	440a      	add	r2, r1
 80008aa:	4413      	add	r3, r2
 80008ac:	4622      	mov	r2, r4
 80008ae:	701a      	strb	r2, [r3, #0]
		for(char j = last_space; j < i; j++){
 80008b0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80008b4:	3301      	adds	r3, #1
 80008b6:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 80008ba:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 80008be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d3dc      	bcc.n	8000880 <sh_command_resolve+0x44>
			}
			argv[argc][i-last_space] = '\0';
 80008c6:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
 80008ca:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 80008ce:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80008d2:	1acb      	subs	r3, r1, r3
 80008d4:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80008d8:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	fb00 f202 	mul.w	r2, r0, r2
 80008e2:	440a      	add	r2, r1
 80008e4:	4413      	add	r3, r2
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
			last_space = i+1;
 80008ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80008ee:	3301      	adds	r3, #1
 80008f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
			argc++;
 80008f4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80008f8:	3301      	adds	r3, #1
 80008fa:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
		}
		i++;
 80008fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000902:	3301      	adds	r3, #1
 8000904:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	while(h_shell.sh_cmd_current[i-1] != '\0'){
 8000908:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800090c:	3b01      	subs	r3, #1
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <sh_command_resolve+0xec>)
 8000910:	4413      	add	r3, r2
 8000912:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8000916:	2b00      	cmp	r3, #0
 8000918:	d19d      	bne.n	8000856 <sh_command_resolve+0x1a>
	}


}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000922:	46bd      	mov	sp, r7
 8000924:	bc90      	pop	{r4, r7}
 8000926:	4770      	bx	lr
 8000928:	200000c4 	.word	0x200000c4

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x44>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_MspInit+0x44>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x44>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x44>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x44>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f9b6 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USART1_IRQHandler+0x10>)
 80009ce:	f002 fa8d 	bl	8002eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000424 	.word	0x20000424

080009dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <DMA2_Stream2_IRQHandler+0x10>)
 80009e2:	f000 fc3b 	bl	800125c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200004ac 	.word	0x200004ac

080009f0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <DMA2_Stream7_IRQHandler+0x10>)
 80009f6:	f000 fc31 	bl	800125c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000050c 	.word	0x2000050c

08000a04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART1_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART1_UART_Init+0x58>)
 8000a6c:	f002 f8a8 	bl	8002bc0 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f7ff fe2d 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000424 	.word	0x20000424
 8000a84:	40011000 	.word	0x40011000

08000a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0ac      	sub	sp, #176	; 0xb0
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	2284      	movs	r2, #132	; 0x84
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 f9dd 	bl	8003e68 <memset>
  if(uartHandle->Instance==USART1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a64      	ldr	r2, [pc, #400]	; (8000c44 <HAL_UART_MspInit+0x1bc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	f040 80c1 	bne.w	8000c3c <HAL_UART_MspInit+0x1b4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000aba:	2340      	movs	r3, #64	; 0x40
 8000abc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fc8a 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ad2:	f7ff fdff 	bl	80006d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad6:	4b5c      	ldr	r3, [pc, #368]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a5b      	ldr	r2, [pc, #364]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b59      	ldr	r3, [pc, #356]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b56      	ldr	r3, [pc, #344]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a55      	ldr	r2, [pc, #340]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b53      	ldr	r3, [pc, #332]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b50      	ldr	r3, [pc, #320]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <HAL_UART_MspInit+0x1c0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b36:	2307      	movs	r3, #7
 8000b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b40:	4619      	mov	r1, r3
 8000b42:	4842      	ldr	r0, [pc, #264]	; (8000c4c <HAL_UART_MspInit+0x1c4>)
 8000b44:	f000 fdc6 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b62:	2307      	movs	r3, #7
 8000b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4838      	ldr	r0, [pc, #224]	; (8000c50 <HAL_UART_MspInit+0x1c8>)
 8000b70:	f000 fdb0 	bl	80016d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000b76:	4a38      	ldr	r2, [pc, #224]	; (8000c58 <HAL_UART_MspInit+0x1d0>)
 8000b78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000b7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b82:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bb4:	4827      	ldr	r0, [pc, #156]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000bb6:	f000 fa11 	bl	8000fdc <HAL_DMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000bc0:	f7ff fd88 	bl	80006d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000bc8:	675a      	str	r2, [r3, #116]	; 0x74
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <HAL_UART_MspInit+0x1cc>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_UART_MspInit+0x1d8>)
 8000bd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000c12:	f000 f9e3 	bl	8000fdc <HAL_DMA_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_UART_MspInit+0x198>
    {
      Error_Handler();
 8000c1c:	f7ff fd5a 	bl	80006d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000c24:	671a      	str	r2, [r3, #112]	; 0x70
 8000c26:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_UART_MspInit+0x1d4>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2025      	movs	r0, #37	; 0x25
 8000c32:	f000 f99c 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c36:	2025      	movs	r0, #37	; 0x25
 8000c38:	f000 f9b5 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	37b0      	adds	r7, #176	; 0xb0
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40011000 	.word	0x40011000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40020000 	.word	0x40020000
 8000c54:	200004ac 	.word	0x200004ac
 8000c58:	40026440 	.word	0x40026440
 8000c5c:	2000050c 	.word	0x2000050c
 8000c60:	400264b8 	.word	0x400264b8

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff feb9 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f003 f8c5 	bl	8003e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc97 	bl	80005c8 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000ca8:	08003ecc 	.word	0x08003ecc
  ldr r2, =_sbss
 8000cac:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000cb0:	20000570 	.word	0x20000570

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>

08000cb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f000 f94c 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc0:	200f      	movs	r0, #15
 8000cc2:	f000 f805 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc6:	f7ff fe31 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f967 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f92f 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000009c 	.word	0x2000009c
 8000d28:	200000a4 	.word	0x200000a4
 8000d2c:	200000a0 	.word	0x200000a0

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200000a4 	.word	0x200000a4
 8000d54:	2000056c 	.word	0x2000056c

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000056c 	.word	0x2000056c

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000a4 	.word	0x200000a4

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <__NVIC_SetPriorityGrouping+0x40>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x40>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	05fa0000 	.word	0x05fa0000

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff feb6 	bl	8000d58 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e099      	b.n	800112c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001018:	e00f      	b.n	800103a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800101a:	f7ff fe9d 	bl	8000d58 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b05      	cmp	r3, #5
 8001026:	d908      	bls.n	800103a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e078      	b.n	800112c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e8      	bne.n	800101a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <HAL_DMA_Init+0x158>)
 8001054:	4013      	ands	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800107e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	2b04      	cmp	r3, #4
 8001092:	d107      	bne.n	80010a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4313      	orrs	r3, r2
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f023 0307 	bic.w	r3, r3, #7
 80010ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d117      	bne.n	80010fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00e      	beq.n	80010fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fa7b 	bl	80015dc <DMA_CheckFifoParam>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2240      	movs	r2, #64	; 0x40
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010fa:	2301      	movs	r3, #1
 80010fc:	e016      	b.n	800112c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fa32 	bl	8001570 <DMA_CalcBaseAndBitshift>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001114:	223f      	movs	r2, #63	; 0x3f
 8001116:	409a      	lsls	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f010803f 	.word	0xf010803f

08001138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001146:	f7ff fe07 	bl	8000d58 <HAL_GetTick>
 800114a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d008      	beq.n	800116a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e052      	b.n	8001210 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0216 	bic.w	r2, r2, #22
 8001178:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001188:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d103      	bne.n	800119a <HAL_DMA_Abort+0x62>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0208 	bic.w	r2, r2, #8
 80011a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ba:	e013      	b.n	80011e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011bc:	f7ff fdcc 	bl	8000d58 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d90c      	bls.n	80011e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e015      	b.n	8001210 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1e4      	bne.n	80011bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f6:	223f      	movs	r2, #63	; 0x3f
 80011f8:	409a      	lsls	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d004      	beq.n	8001236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00c      	b.n	8001250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2205      	movs	r2, #5
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001268:	4b8e      	ldr	r3, [pc, #568]	; (80014a4 <HAL_DMA_IRQHandler+0x248>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a8e      	ldr	r2, [pc, #568]	; (80014a8 <HAL_DMA_IRQHandler+0x24c>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0a9b      	lsrs	r3, r3, #10
 8001274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	2208      	movs	r2, #8
 8001288:	409a      	lsls	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01a      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d013      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0204 	bic.w	r2, r2, #4
 80012ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b4:	2208      	movs	r2, #8
 80012b6:	409a      	lsls	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c0:	f043 0201 	orr.w	r2, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012cc:	2201      	movs	r2, #1
 80012ce:	409a      	lsls	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2201      	movs	r2, #1
 80012ec:	409a      	lsls	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f6:	f043 0202 	orr.w	r2, r3, #2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2204      	movs	r2, #4
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d012      	beq.n	8001334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001320:	2204      	movs	r2, #4
 8001322:	409a      	lsls	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	f043 0204 	orr.w	r2, r3, #4
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	2210      	movs	r2, #16
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d043      	beq.n	80013cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d03c      	beq.n	80013cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	2210      	movs	r2, #16
 8001358:	409a      	lsls	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d018      	beq.n	800139e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d108      	bne.n	800138c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d024      	beq.n	80013cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
 800138a:	e01f      	b.n	80013cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001390:	2b00      	cmp	r3, #0
 8001392:	d01b      	beq.n	80013cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	4798      	blx	r3
 800139c:	e016      	b.n	80013cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d107      	bne.n	80013bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0208 	bic.w	r2, r2, #8
 80013ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	2220      	movs	r2, #32
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 808f 	beq.w	80014fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 8087 	beq.w	80014fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	2220      	movs	r2, #32
 80013f4:	409a      	lsls	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b05      	cmp	r3, #5
 8001404:	d136      	bne.n	8001474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0216 	bic.w	r2, r2, #22
 8001414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <HAL_DMA_IRQHandler+0x1da>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144a:	223f      	movs	r2, #63	; 0x3f
 800144c:	409a      	lsls	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001466:	2b00      	cmp	r3, #0
 8001468:	d07e      	beq.n	8001568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
        }
        return;
 8001472:	e079      	b.n	8001568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d01d      	beq.n	80014be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10d      	bne.n	80014ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	2b00      	cmp	r3, #0
 8001496:	d031      	beq.n	80014fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e02c      	b.n	80014fc <HAL_DMA_IRQHandler+0x2a0>
 80014a2:	bf00      	nop
 80014a4:	2000009c 	.word	0x2000009c
 80014a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d023      	beq.n	80014fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
 80014bc:	e01e      	b.n	80014fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10f      	bne.n	80014ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0210 	bic.w	r2, r2, #16
 80014da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001500:	2b00      	cmp	r3, #0
 8001502:	d032      	beq.n	800156a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d022      	beq.n	8001556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2205      	movs	r2, #5
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3301      	adds	r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	d307      	bcc.n	8001544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f2      	bne.n	8001528 <HAL_DMA_IRQHandler+0x2cc>
 8001542:	e000      	b.n	8001546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	4798      	blx	r3
 8001566:	e000      	b.n	800156a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001568:	bf00      	nop
    }
  }
}
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3b10      	subs	r3, #16
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <DMA_CalcBaseAndBitshift+0x60>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <DMA_CalcBaseAndBitshift+0x64>)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d908      	bls.n	80015b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <DMA_CalcBaseAndBitshift+0x68>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	1d1a      	adds	r2, r3, #4
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	659a      	str	r2, [r3, #88]	; 0x58
 80015ae:	e006      	b.n	80015be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <DMA_CalcBaseAndBitshift+0x68>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	aaaaaaab 	.word	0xaaaaaaab
 80015d4:	08003eb4 	.word	0x08003eb4
 80015d8:	fffffc00 	.word	0xfffffc00

080015dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d11f      	bne.n	8001636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d856      	bhi.n	80016aa <DMA_CheckFifoParam+0xce>
 80015fc:	a201      	add	r2, pc, #4	; (adr r2, 8001604 <DMA_CheckFifoParam+0x28>)
 80015fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001602:	bf00      	nop
 8001604:	08001615 	.word	0x08001615
 8001608:	08001627 	.word	0x08001627
 800160c:	08001615 	.word	0x08001615
 8001610:	080016ab 	.word	0x080016ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d046      	beq.n	80016ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001624:	e043      	b.n	80016ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800162e:	d140      	bne.n	80016b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001634:	e03d      	b.n	80016b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163e:	d121      	bne.n	8001684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d837      	bhi.n	80016b6 <DMA_CheckFifoParam+0xda>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <DMA_CheckFifoParam+0x70>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	0800165d 	.word	0x0800165d
 8001650:	08001663 	.word	0x08001663
 8001654:	0800165d 	.word	0x0800165d
 8001658:	08001675 	.word	0x08001675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
      break;
 8001660:	e030      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d025      	beq.n	80016ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001672:	e022      	b.n	80016ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800167c:	d11f      	bne.n	80016be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001682:	e01c      	b.n	80016be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d903      	bls.n	8001692 <DMA_CheckFifoParam+0xb6>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d003      	beq.n	8001698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001690:	e018      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
      break;
 8001696:	e015      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00e      	beq.n	80016c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
      break;
 80016a8:	e00b      	b.n	80016c2 <DMA_CheckFifoParam+0xe6>
      break;
 80016aa:	bf00      	nop
 80016ac:	e00a      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      break;
 80016ae:	bf00      	nop
 80016b0:	e008      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      break;
 80016b2:	bf00      	nop
 80016b4:	e006      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      break;
 80016b6:	bf00      	nop
 80016b8:	e004      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      break;
 80016ba:	bf00      	nop
 80016bc:	e002      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <DMA_CheckFifoParam+0xe8>
      break;
 80016c2:	bf00      	nop
    }
  } 
  
  return status; 
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e175      	b.n	80019e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8164 	bne.w	80019da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d005      	beq.n	800172a <HAL_GPIO_Init+0x56>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d130      	bne.n	800178c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 0201 	and.w	r2, r3, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b03      	cmp	r3, #3
 8001796:	d017      	beq.n	80017c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d123      	bne.n	800181c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	08da      	lsrs	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3208      	adds	r2, #8
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80be 	beq.w	80019da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <HAL_GPIO_Init+0x324>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <HAL_GPIO_Init+0x324>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_GPIO_Init+0x324>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001876:	4a61      	ldr	r2, [pc, #388]	; (80019fc <HAL_GPIO_Init+0x328>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_GPIO_Init+0x32c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d037      	beq.n	8001912 <HAL_GPIO_Init+0x23e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a57      	ldr	r2, [pc, #348]	; (8001a04 <HAL_GPIO_Init+0x330>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d031      	beq.n	800190e <HAL_GPIO_Init+0x23a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_GPIO_Init+0x334>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_GPIO_Init+0x236>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a55      	ldr	r2, [pc, #340]	; (8001a0c <HAL_GPIO_Init+0x338>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x232>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_GPIO_Init+0x33c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x22e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a53      	ldr	r2, [pc, #332]	; (8001a14 <HAL_GPIO_Init+0x340>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x22a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_GPIO_Init+0x344>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x226>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_GPIO_Init+0x348>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x222>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_GPIO_Init+0x34c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x21e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_GPIO_Init+0x350>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x21a>
 80018ea:	2309      	movs	r3, #9
 80018ec:	e012      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018ee:	230a      	movs	r3, #10
 80018f0:	e010      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018f2:	2308      	movs	r3, #8
 80018f4:	e00e      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e00c      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x240>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x240>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x240>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x240>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <HAL_GPIO_Init+0x328>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_GPIO_Init+0x354>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001956:	4a34      	ldr	r2, [pc, #208]	; (8001a28 <HAL_GPIO_Init+0x354>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800195c:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <HAL_GPIO_Init+0x354>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001980:	4a29      	ldr	r2, [pc, #164]	; (8001a28 <HAL_GPIO_Init+0x354>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_GPIO_Init+0x354>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_GPIO_Init+0x354>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_GPIO_Init+0x354>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <HAL_GPIO_Init+0x354>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f ae86 	bls.w	80016f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021800 	.word	0x40021800
 8001a1c:	40021c00 	.word	0x40021c00
 8001a20:	40022000 	.word	0x40022000
 8001a24:	40022400 	.word	0x40022400
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5a:	f7ff f97d 	bl	8000d58 <HAL_GetTick>
 8001a5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a60:	e009      	b.n	8001a76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a62:	f7ff f979 	bl	8000d58 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a70:	d901      	bls.n	8001a76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e022      	b.n	8001abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a82:	d1ee      	bne.n	8001a62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a90:	f7ff f962 	bl	8000d58 <HAL_GetTick>
 8001a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a96:	e009      	b.n	8001aac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a98:	f7ff f95e 	bl	8000d58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa6:	d901      	bls.n	8001aac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e007      	b.n	8001abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ab8:	d1ee      	bne.n	8001a98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000

08001acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e291      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af0:	4b96      	ldr	r3, [pc, #600]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d00c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afc:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d112      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62>
 8001b08:	4b90      	ldr	r3, [pc, #576]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b14:	d10b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b16:	4b8d      	ldr	r3, [pc, #564]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d06c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x130>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d168      	bne.n	8001bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e26b      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x7a>
 8001b38:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a83      	ldr	r2, [pc, #524]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e02e      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x9c>
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7e      	ldr	r2, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7b      	ldr	r2, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e01d      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0xc0>
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a75      	ldr	r2, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a72      	ldr	r2, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd8>
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b6c      	ldr	r3, [pc, #432]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6b      	ldr	r2, [pc, #428]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f8d4 	bl	8000d58 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff f8d0 	bl	8000d58 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e21f      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xe8>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f8c0 	bl	8000d58 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f8bc 	bl	8000d58 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e20b      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x110>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d069      	beq.n	8001cde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c16:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d11c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x190>
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x17a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e1df      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	493d      	ldr	r1, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	e040      	b.n	8001cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d023      	beq.n	8001cac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c64:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a38      	ldr	r2, [pc, #224]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f872 	bl	8000d58 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff f86e 	bl	8000d58 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1bd      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4929      	ldr	r1, [pc, #164]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
 8001caa:	e018      	b.n	8001cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f84e 	bl	8000d58 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f84a 	bl	8000d58 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e199      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d038      	beq.n	8001d5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d019      	beq.n	8001d26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f82b 	bl	8000d58 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d06:	f7ff f827 	bl	8000d58 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e176      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x23a>
 8001d24:	e01a      	b.n	8001d5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_RCC_OscConfig+0x280>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff f811 	bl	8000d58 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f80d 	bl	8000d58 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d903      	bls.n	8001d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e15c      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
 8001d4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1ee      	bne.n	8001d3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a4 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d92:	4b82      	ldr	r3, [pc, #520]	; (8001f9c <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x4d0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7e      	ldr	r2, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x4d0>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001daa:	f7fe ffd5 	bl	8000d58 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db2:	f7fe ffd1 	bl	8000d58 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e120      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc4:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_RCC_OscConfig+0x4d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x31a>
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	e02d      	b.n	8001e42 <HAL_RCC_OscConfig+0x376>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x33c>
 8001dee:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a69      	ldr	r2, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a66      	ldr	r2, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x376>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x35e>
 8001e10:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a5d      	ldr	r2, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x376>
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a5a      	ldr	r2, [pc, #360]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7fe ff85 	bl	8000d58 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7fe ff81 	bl	8000d58 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0ce      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ee      	beq.n	8001e52 <HAL_RCC_OscConfig+0x386>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7fe ff6f 	bl	8000d58 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7fe ff6b 	bl	8000d58 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80a4 	beq.w	8002004 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d06b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d149      	bne.n	8001f64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a30      	ldr	r2, [pc, #192]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7fe ff3c 	bl	8000d58 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe ff38 	bl	8000d58 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e087      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	019b      	lsls	r3, r3, #6
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4313      	orrs	r3, r2
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff0c 	bl	8000d58 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff08 	bl	8000d58 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e057      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x478>
 8001f62:	e04f      	b.n	8002004 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe fef2 	bl	8000d58 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe feee 	bl	8000d58 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e03d      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_OscConfig+0x4cc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4ac>
 8001f96:	e035      	b.n	8002004 <HAL_RCC_OscConfig+0x538>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x544>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d028      	beq.n	8002000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d121      	bne.n	8002000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d11a      	bne.n	8002000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0d0      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	4965      	ldr	r1, [pc, #404]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800207e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d040      	beq.n	8002138 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e073      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4936      	ldr	r1, [pc, #216]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002108:	f7fe fe26 	bl	8000d58 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fe22 	bl	8000d58 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e053      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d210      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x1cc>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1d0>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_ClockConfig+0x1d4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fd82 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023c00 	.word	0x40023c00
 80021dc:	40023800 	.word	0x40023800
 80021e0:	08003e9c 	.word	0x08003e9c
 80021e4:	2000009c 	.word	0x2000009c
 80021e8:	200000a0 	.word	0x200000a0

080021ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f0:	b090      	sub	sp, #64	; 0x40
 80021f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
 80021f8:	2300      	movs	r3, #0
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fc:	2300      	movs	r3, #0
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCC_GetSysClockFreq+0x180>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d00d      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x40>
 8002210:	2b08      	cmp	r3, #8
 8002212:	f200 80a1 	bhi.w	8002358 <HAL_RCC_GetSysClockFreq+0x16c>
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x34>
 800221a:	2b04      	cmp	r3, #4
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x3a>
 800221e:	e09b      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_GetSysClockFreq+0x184>)
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002224:	e09b      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002226:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_GetSysClockFreq+0x188>)
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800222a:	e098      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800222c:	4b4f      	ldr	r3, [pc, #316]	; (800236c <HAL_RCC_GetSysClockFreq+0x180>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002236:	4b4d      	ldr	r3, [pc, #308]	; (800236c <HAL_RCC_GetSysClockFreq+0x180>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d028      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b4a      	ldr	r3, [pc, #296]	; (800236c <HAL_RCC_GetSysClockFreq+0x180>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	2200      	movs	r2, #0
 800224a:	623b      	str	r3, [r7, #32]
 800224c:	627a      	str	r2, [r7, #36]	; 0x24
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002254:	2100      	movs	r1, #0
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_GetSysClockFreq+0x188>)
 8002258:	fb03 f201 	mul.w	r2, r3, r1
 800225c:	2300      	movs	r3, #0
 800225e:	fb00 f303 	mul.w	r3, r0, r3
 8002262:	4413      	add	r3, r2
 8002264:	4a43      	ldr	r2, [pc, #268]	; (8002374 <HAL_RCC_GetSysClockFreq+0x188>)
 8002266:	fba0 1202 	umull	r1, r2, r0, r2
 800226a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800226c:	460a      	mov	r2, r1
 800226e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002272:	4413      	add	r3, r2
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	2200      	movs	r2, #0
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	61fa      	str	r2, [r7, #28]
 800227e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002286:	f7fd ffc7 	bl	8000218 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4613      	mov	r3, r2
 8002290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002292:	e053      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002294:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_RCC_GetSysClockFreq+0x180>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	2200      	movs	r2, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	617a      	str	r2, [r7, #20]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022a6:	f04f 0b00 	mov.w	fp, #0
 80022aa:	4652      	mov	r2, sl
 80022ac:	465b      	mov	r3, fp
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022bc:	0150      	lsls	r0, r2, #5
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	ebb2 080a 	subs.w	r8, r2, sl
 80022c6:	eb63 090b 	sbc.w	r9, r3, fp
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022de:	ebb2 0408 	subs.w	r4, r2, r8
 80022e2:	eb63 0509 	sbc.w	r5, r3, r9
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	00eb      	lsls	r3, r5, #3
 80022f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f4:	00e2      	lsls	r2, r4, #3
 80022f6:	4614      	mov	r4, r2
 80022f8:	461d      	mov	r5, r3
 80022fa:	eb14 030a 	adds.w	r3, r4, sl
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	eb45 030b 	adc.w	r3, r5, fp
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002312:	4629      	mov	r1, r5
 8002314:	028b      	lsls	r3, r1, #10
 8002316:	4621      	mov	r1, r4
 8002318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800231c:	4621      	mov	r1, r4
 800231e:	028a      	lsls	r2, r1, #10
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002326:	2200      	movs	r2, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002330:	f7fd ff72 	bl	8000218 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4613      	mov	r3, r2
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_GetSysClockFreq+0x180>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	3301      	adds	r3, #1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800234c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002356:	e002      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetSysClockFreq+0x184>)
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800235c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002360:	4618      	mov	r0, r3
 8002362:	3740      	adds	r7, #64	; 0x40
 8002364:	46bd      	mov	sp, r7
 8002366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	00f42400 	.word	0x00f42400
 8002374:	017d7840 	.word	0x017d7840

08002378 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_GetHCLKFreq+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000009c 	.word	0x2000009c

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002394:	f7ff fff0 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0a9b      	lsrs	r3, r3, #10
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	08003eac 	.word	0x08003eac

080023b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023bc:	f7ff ffdc 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0b5b      	lsrs	r3, r3, #13
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	08003eac 	.word	0x08003eac

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002408:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a68      	ldr	r2, [pc, #416]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002412:	6093      	str	r3, [r2, #8]
 8002414:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	4964      	ldr	r1, [pc, #400]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d017      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	4959      	ldr	r1, [pc, #356]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002458:	d101      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d017      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800247c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	494a      	ldr	r1, [pc, #296]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002494:	d101      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002496:	2301      	movs	r3, #1
 8002498:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 808b 	beq.w	80025da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6413      	str	r3, [r2, #64]	; 0x40
 80024d0:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7fe fc36 	bl	8000d58 <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fc32 	bl	8000d58 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e357      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d035      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d02e      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800252c:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002534:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a1a      	ldr	r2, [pc, #104]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d114      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fbfa 	bl	8000d58 <HAL_GetTick>
 8002564:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fbf6 	bl	8000d58 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e319      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ee      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002596:	d111      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025a6:	400b      	ands	r3, r1
 80025a8:	4901      	ldr	r1, [pc, #4]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
 80025ae:	e00b      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000
 80025b8:	0ffffcff 	.word	0x0ffffcff
 80025bc:	4baa      	ldr	r3, [pc, #680]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4aa9      	ldr	r2, [pc, #676]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025c6:	6093      	str	r3, [r2, #8]
 80025c8:	4ba7      	ldr	r3, [pc, #668]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	49a4      	ldr	r1, [pc, #656]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025e6:	4ba0      	ldr	r3, [pc, #640]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ec:	4a9e      	ldr	r2, [pc, #632]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025f6:	4b9c      	ldr	r3, [pc, #624]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	4999      	ldr	r1, [pc, #612]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002614:	4b94      	ldr	r3, [pc, #592]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002622:	4991      	ldr	r1, [pc, #580]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002636:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002644:	4988      	ldr	r1, [pc, #544]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002658:	4b83      	ldr	r3, [pc, #524]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002666:	4980      	ldr	r1, [pc, #512]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800267a:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4977      	ldr	r1, [pc, #476]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269c:	4b72      	ldr	r3, [pc, #456]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	496f      	ldr	r1, [pc, #444]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026be:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f023 020c 	bic.w	r2, r3, #12
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026cc:	4966      	ldr	r1, [pc, #408]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026e0:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	495e      	ldr	r1, [pc, #376]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002702:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	4955      	ldr	r1, [pc, #340]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	494d      	ldr	r1, [pc, #308]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002746:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4944      	ldr	r1, [pc, #272]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002768:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	493c      	ldr	r1, [pc, #240]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	4933      	ldr	r1, [pc, #204]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ba:	492b      	ldr	r1, [pc, #172]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d011      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027dc:	4922      	ldr	r1, [pc, #136]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ec:	d101      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	4912      	ldr	r1, [pc, #72]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002840:	4909      	ldr	r1, [pc, #36]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d006      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80d9 	beq.w	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a01      	ldr	r2, [pc, #4]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002866:	e001      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002868:	40023800 	.word	0x40023800
 800286c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286e:	f7fe fa73 	bl	8000d58 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002876:	f7fe fa6f 	bl	8000d58 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b64      	cmp	r3, #100	; 0x64
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e194      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002888:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11d      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028a8:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b6:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028bc:	0e1b      	lsrs	r3, r3, #24
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	019a      	lsls	r2, r3, #6
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	071b      	lsls	r3, r3, #28
 80028dc:	4957      	ldr	r1, [pc, #348]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02e      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290e:	d129      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002924:	0f1b      	lsrs	r3, r3, #28
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	019a      	lsls	r2, r3, #6
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	071b      	lsls	r3, r3, #28
 8002944:	493d      	ldr	r1, [pc, #244]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002952:	f023 021f 	bic.w	r2, r3, #31
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	3b01      	subs	r3, #1
 800295c:	4937      	ldr	r1, [pc, #220]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01d      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002976:	0e1b      	lsrs	r3, r3, #24
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002984:	0f1b      	lsrs	r3, r3, #28
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	019a      	lsls	r2, r3, #6
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	431a      	orrs	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	071b      	lsls	r3, r3, #28
 80029a4:	4925      	ldr	r1, [pc, #148]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d011      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	019a      	lsls	r2, r3, #6
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	071b      	lsls	r3, r3, #28
 80029d4:	4919      	ldr	r1, [pc, #100]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e8:	f7fe f9b6 	bl	8000d58 <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029f0:	f7fe f9b2 	bl	8000d58 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0d7      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f040 80cd 	bne.w	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a22:	f7fe f999 	bl	8000d58 <HAL_GetTick>
 8002a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a2a:	f7fe f995 	bl	8000d58 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	; 0x64
 8002a36:	d903      	bls.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0ba      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a40:	4b5e      	ldr	r3, [pc, #376]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4c:	d0ed      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d02e      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a84:	4b4d      	ldr	r3, [pc, #308]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	0f1b      	lsrs	r3, r3, #28
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	019a      	lsls	r2, r3, #6
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	071b      	lsls	r3, r3, #28
 8002aaa:	4944      	ldr	r1, [pc, #272]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ab2:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	493d      	ldr	r1, [pc, #244]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d022      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae0:	d11d      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	0e1b      	lsrs	r3, r3, #24
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	0f1b      	lsrs	r3, r3, #28
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	019a      	lsls	r2, r3, #6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	071b      	lsls	r3, r3, #28
 8002b16:	4929      	ldr	r1, [pc, #164]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d028      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	0e1b      	lsrs	r3, r3, #24
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b38:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	019a      	lsls	r2, r3, #6
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	431a      	orrs	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	4917      	ldr	r1, [pc, #92]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4911      	ldr	r1, [pc, #68]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b88:	f7fe f8e6 	bl	8000d58 <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b90:	f7fe f8e2 	bl	8000d58 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e007      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bae:	d1ef      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e040      	b.n	8002c54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd ff50 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2224      	movs	r2, #36	; 0x24
 8002bec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fc66 	bl	80034d0 <UART_SetConfig>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e022      	b.n	8002c54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 febe 	bl	8003998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 ff45 	bl	8003adc <UART_CheckIdleState>
 8002c52:	4603      	mov	r3, r0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d171      	bne.n	8002d58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_UART_Transmit+0x24>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e06a      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2221      	movs	r2, #33	; 0x21
 8002c90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c92:	f7fe f861 	bl	8000d58 <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d108      	bne.n	8002cc4 <HAL_UART_Transmit+0x68>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	e003      	b.n	8002ccc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ccc:	e02c      	b.n	8002d28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 ff36 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e038      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	3302      	adds	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e007      	b.n	8002d16 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3301      	adds	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1cc      	bne.n	8002cce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 ff03 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e005      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af02      	add	r7, sp, #8
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	f040 80b1 	bne.w	8002ee0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_Receive+0x28>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0a9      	b.n	8002ee2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2222      	movs	r2, #34	; 0x22
 8002d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da4:	f7fd ffd8 	bl	8000d58 <HAL_GetTick>
 8002da8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	88fa      	ldrh	r2, [r7, #6]
 8002db6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc2:	d10e      	bne.n	8002de2 <HAL_UART_Receive+0x80>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_UART_Receive+0x76>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dd6:	e02d      	b.n	8002e34 <HAL_UART_Receive+0xd2>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002de0:	e028      	b.n	8002e34 <HAL_UART_Receive+0xd2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <HAL_UART_Receive+0xa4>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Receive+0x9a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dfa:	e01b      	b.n	8002e34 <HAL_UART_Receive+0xd2>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	227f      	movs	r2, #127	; 0x7f
 8002e00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e04:	e016      	b.n	8002e34 <HAL_UART_Receive+0xd2>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e0e:	d10d      	bne.n	8002e2c <HAL_UART_Receive+0xca>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_UART_Receive+0xc0>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	227f      	movs	r2, #127	; 0x7f
 8002e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e20:	e008      	b.n	8002e34 <HAL_UART_Receive+0xd2>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	223f      	movs	r2, #63	; 0x3f
 8002e26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e2a:	e003      	b.n	8002e34 <HAL_UART_Receive+0xd2>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e3a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d108      	bne.n	8002e58 <HAL_UART_Receive+0xf6>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e003      	b.n	8002e60 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e60:	e032      	b.n	8002ec8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fe6c 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e032      	b.n	8002ee2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	8a7b      	ldrh	r3, [r7, #18]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	3302      	adds	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e00c      	b.n	8002eb6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	8a7b      	ldrh	r3, [r7, #18]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1c6      	bne.n	8002e62 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b0ba      	sub	sp, #232	; 0xe8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f16:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d115      	bne.n	8002f54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00f      	beq.n	8002f54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8297 	beq.w	8003478 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
      }
      return;
 8002f52:	e291      	b.n	8003478 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8117 	beq.w	800318c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f6e:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_UART_IRQHandler+0x298>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 810a 	beq.w	800318c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d011      	beq.n	8002fa8 <HAL_UART_IRQHandler+0xbc>
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d011      	beq.n	8002fd8 <HAL_UART_IRQHandler+0xec>
 8002fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	f043 0204 	orr.w	r2, r3, #4
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d011      	beq.n	8003008 <HAL_UART_IRQHandler+0x11c>
 8002fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffe:	f043 0202 	orr.w	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d017      	beq.n	8003044 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003024:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2208      	movs	r2, #8
 8003032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303a:	f043 0208 	orr.w	r2, r3, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304c:	2b00      	cmp	r3, #0
 800304e:	d012      	beq.n	8003076 <HAL_UART_IRQHandler+0x18a>
 8003050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00c      	beq.n	8003076 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 81fd 	beq.w	800347c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800308e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d005      	beq.n	80030ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d04f      	beq.n	800316e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fe01 	bl	8003cd6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d141      	bne.n	8003166 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3308      	adds	r3, #8
 80030e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3308      	adds	r3, #8
 800310a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800310e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800311a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1d9      	bne.n	80030e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	2b00      	cmp	r3, #0
 8003134:	d013      	beq.n	800315e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	4a13      	ldr	r2, [pc, #76]	; (8003188 <HAL_UART_IRQHandler+0x29c>)
 800313c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f868 	bl	8001218 <HAL_DMA_Abort_IT>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003158:	4610      	mov	r0, r2
 800315a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	e00f      	b.n	800317e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9a0 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	e00b      	b.n	800317e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f99c 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316c:	e007      	b.n	800317e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f998 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800317c:	e17e      	b.n	800347c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317e:	bf00      	nop
    return;
 8003180:	e17c      	b.n	800347c <HAL_UART_IRQHandler+0x590>
 8003182:	bf00      	nop
 8003184:	04000120 	.word	0x04000120
 8003188:	08003d9f 	.word	0x08003d9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 814c 	bne.w	800342e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8145 	beq.w	800342e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 813e 	beq.w	800342e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2210      	movs	r2, #16
 80031b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	f040 80b6 	bne.w	8003336 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8150 	beq.w	8003480 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f080 8148 	bcs.w	8003480 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003204:	f000 8086 	beq.w	8003314 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800321c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003236:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800323e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800324a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1da      	bne.n	8003208 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3308      	adds	r3, #8
 8003258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800327a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800327e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e1      	bne.n	8003252 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3308      	adds	r3, #8
 8003294:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e3      	bne.n	800328e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e4:	f023 0310 	bic.w	r3, r3, #16
 80032e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80032f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e4      	bne.n	80032d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd ff12 	bl	8001138 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003326:	b29b      	uxth	r3, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8c2 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003334:	e0a4      	b.n	8003480 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8096 	beq.w	8003484 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8091 	beq.w	8003484 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
 8003386:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800338a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e4      	bne.n	8003362 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	623b      	str	r3, [r7, #32]
   return(result);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3308      	adds	r3, #8
 80033b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033bc:	633a      	str	r2, [r7, #48]	; 0x30
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e3      	bne.n	8003398 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	617b      	str	r3, [r7, #20]
   return(result);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e4      	bne.n	80033e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f846 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800342c:	e02a      	b.n	8003484 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01c      	beq.n	8003488 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
    }
    return;
 8003456:	e017      	b.n	8003488 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <HAL_UART_IRQHandler+0x59e>
 8003464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fcaa 	bl	8003dca <UART_EndTransmit_IT>
    return;
 8003476:	e008      	b.n	800348a <HAL_UART_IRQHandler+0x59e>
      return;
 8003478:	bf00      	nop
 800347a:	e006      	b.n	800348a <HAL_UART_IRQHandler+0x59e>
    return;
 800347c:	bf00      	nop
 800347e:	e004      	b.n	800348a <HAL_UART_IRQHandler+0x59e>
      return;
 8003480:	bf00      	nop
 8003482:	e002      	b.n	800348a <HAL_UART_IRQHandler+0x59e>
      return;
 8003484:	bf00      	nop
 8003486:	e000      	b.n	800348a <HAL_UART_IRQHandler+0x59e>
    return;
 8003488:	bf00      	nop
  }

}
 800348a:	37e8      	adds	r7, #232	; 0xe8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4ba6      	ldr	r3, [pc, #664]	; (8003794 <UART_SetConfig+0x2c4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	6979      	ldr	r1, [r7, #20]
 8003504:	430b      	orrs	r3, r1
 8003506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a94      	ldr	r2, [pc, #592]	; (8003798 <UART_SetConfig+0x2c8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d120      	bne.n	800358e <UART_SetConfig+0xbe>
 800354c:	4b93      	ldr	r3, [pc, #588]	; (800379c <UART_SetConfig+0x2cc>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b03      	cmp	r3, #3
 8003558:	d816      	bhi.n	8003588 <UART_SetConfig+0xb8>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <UART_SetConfig+0x90>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	08003571 	.word	0x08003571
 8003564:	0800357d 	.word	0x0800357d
 8003568:	08003577 	.word	0x08003577
 800356c:	08003583 	.word	0x08003583
 8003570:	2301      	movs	r3, #1
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e150      	b.n	8003818 <UART_SetConfig+0x348>
 8003576:	2302      	movs	r3, #2
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e14d      	b.n	8003818 <UART_SetConfig+0x348>
 800357c:	2304      	movs	r3, #4
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e14a      	b.n	8003818 <UART_SetConfig+0x348>
 8003582:	2308      	movs	r3, #8
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e147      	b.n	8003818 <UART_SetConfig+0x348>
 8003588:	2310      	movs	r3, #16
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e144      	b.n	8003818 <UART_SetConfig+0x348>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a83      	ldr	r2, [pc, #524]	; (80037a0 <UART_SetConfig+0x2d0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d132      	bne.n	80035fe <UART_SetConfig+0x12e>
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <UART_SetConfig+0x2cc>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d828      	bhi.n	80035f8 <UART_SetConfig+0x128>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <UART_SetConfig+0xdc>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080035f9 	.word	0x080035f9
 80035b4:	080035f9 	.word	0x080035f9
 80035b8:	080035f9 	.word	0x080035f9
 80035bc:	080035ed 	.word	0x080035ed
 80035c0:	080035f9 	.word	0x080035f9
 80035c4:	080035f9 	.word	0x080035f9
 80035c8:	080035f9 	.word	0x080035f9
 80035cc:	080035e7 	.word	0x080035e7
 80035d0:	080035f9 	.word	0x080035f9
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	080035f9 	.word	0x080035f9
 80035dc:	080035f3 	.word	0x080035f3
 80035e0:	2300      	movs	r3, #0
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e118      	b.n	8003818 <UART_SetConfig+0x348>
 80035e6:	2302      	movs	r3, #2
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e115      	b.n	8003818 <UART_SetConfig+0x348>
 80035ec:	2304      	movs	r3, #4
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e112      	b.n	8003818 <UART_SetConfig+0x348>
 80035f2:	2308      	movs	r3, #8
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e10f      	b.n	8003818 <UART_SetConfig+0x348>
 80035f8:	2310      	movs	r3, #16
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e10c      	b.n	8003818 <UART_SetConfig+0x348>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a68      	ldr	r2, [pc, #416]	; (80037a4 <UART_SetConfig+0x2d4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d120      	bne.n	800364a <UART_SetConfig+0x17a>
 8003608:	4b64      	ldr	r3, [pc, #400]	; (800379c <UART_SetConfig+0x2cc>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	d013      	beq.n	800363e <UART_SetConfig+0x16e>
 8003616:	2b30      	cmp	r3, #48	; 0x30
 8003618:	d814      	bhi.n	8003644 <UART_SetConfig+0x174>
 800361a:	2b20      	cmp	r3, #32
 800361c:	d009      	beq.n	8003632 <UART_SetConfig+0x162>
 800361e:	2b20      	cmp	r3, #32
 8003620:	d810      	bhi.n	8003644 <UART_SetConfig+0x174>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <UART_SetConfig+0x15c>
 8003626:	2b10      	cmp	r3, #16
 8003628:	d006      	beq.n	8003638 <UART_SetConfig+0x168>
 800362a:	e00b      	b.n	8003644 <UART_SetConfig+0x174>
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e0f2      	b.n	8003818 <UART_SetConfig+0x348>
 8003632:	2302      	movs	r3, #2
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e0ef      	b.n	8003818 <UART_SetConfig+0x348>
 8003638:	2304      	movs	r3, #4
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e0ec      	b.n	8003818 <UART_SetConfig+0x348>
 800363e:	2308      	movs	r3, #8
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e0e9      	b.n	8003818 <UART_SetConfig+0x348>
 8003644:	2310      	movs	r3, #16
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e0e6      	b.n	8003818 <UART_SetConfig+0x348>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a56      	ldr	r2, [pc, #344]	; (80037a8 <UART_SetConfig+0x2d8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d120      	bne.n	8003696 <UART_SetConfig+0x1c6>
 8003654:	4b51      	ldr	r3, [pc, #324]	; (800379c <UART_SetConfig+0x2cc>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800365e:	2bc0      	cmp	r3, #192	; 0xc0
 8003660:	d013      	beq.n	800368a <UART_SetConfig+0x1ba>
 8003662:	2bc0      	cmp	r3, #192	; 0xc0
 8003664:	d814      	bhi.n	8003690 <UART_SetConfig+0x1c0>
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d009      	beq.n	800367e <UART_SetConfig+0x1ae>
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d810      	bhi.n	8003690 <UART_SetConfig+0x1c0>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <UART_SetConfig+0x1a8>
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d006      	beq.n	8003684 <UART_SetConfig+0x1b4>
 8003676:	e00b      	b.n	8003690 <UART_SetConfig+0x1c0>
 8003678:	2300      	movs	r3, #0
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e0cc      	b.n	8003818 <UART_SetConfig+0x348>
 800367e:	2302      	movs	r3, #2
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e0c9      	b.n	8003818 <UART_SetConfig+0x348>
 8003684:	2304      	movs	r3, #4
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e0c6      	b.n	8003818 <UART_SetConfig+0x348>
 800368a:	2308      	movs	r3, #8
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e0c3      	b.n	8003818 <UART_SetConfig+0x348>
 8003690:	2310      	movs	r3, #16
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e0c0      	b.n	8003818 <UART_SetConfig+0x348>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a44      	ldr	r2, [pc, #272]	; (80037ac <UART_SetConfig+0x2dc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d125      	bne.n	80036ec <UART_SetConfig+0x21c>
 80036a0:	4b3e      	ldr	r3, [pc, #248]	; (800379c <UART_SetConfig+0x2cc>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d017      	beq.n	80036e0 <UART_SetConfig+0x210>
 80036b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b4:	d817      	bhi.n	80036e6 <UART_SetConfig+0x216>
 80036b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ba:	d00b      	beq.n	80036d4 <UART_SetConfig+0x204>
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d811      	bhi.n	80036e6 <UART_SetConfig+0x216>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <UART_SetConfig+0x1fe>
 80036c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ca:	d006      	beq.n	80036da <UART_SetConfig+0x20a>
 80036cc:	e00b      	b.n	80036e6 <UART_SetConfig+0x216>
 80036ce:	2300      	movs	r3, #0
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e0a1      	b.n	8003818 <UART_SetConfig+0x348>
 80036d4:	2302      	movs	r3, #2
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e09e      	b.n	8003818 <UART_SetConfig+0x348>
 80036da:	2304      	movs	r3, #4
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e09b      	b.n	8003818 <UART_SetConfig+0x348>
 80036e0:	2308      	movs	r3, #8
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e098      	b.n	8003818 <UART_SetConfig+0x348>
 80036e6:	2310      	movs	r3, #16
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e095      	b.n	8003818 <UART_SetConfig+0x348>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2f      	ldr	r2, [pc, #188]	; (80037b0 <UART_SetConfig+0x2e0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d125      	bne.n	8003742 <UART_SetConfig+0x272>
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <UART_SetConfig+0x2cc>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003704:	d017      	beq.n	8003736 <UART_SetConfig+0x266>
 8003706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800370a:	d817      	bhi.n	800373c <UART_SetConfig+0x26c>
 800370c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003710:	d00b      	beq.n	800372a <UART_SetConfig+0x25a>
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003716:	d811      	bhi.n	800373c <UART_SetConfig+0x26c>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <UART_SetConfig+0x254>
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d006      	beq.n	8003730 <UART_SetConfig+0x260>
 8003722:	e00b      	b.n	800373c <UART_SetConfig+0x26c>
 8003724:	2301      	movs	r3, #1
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e076      	b.n	8003818 <UART_SetConfig+0x348>
 800372a:	2302      	movs	r3, #2
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e073      	b.n	8003818 <UART_SetConfig+0x348>
 8003730:	2304      	movs	r3, #4
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e070      	b.n	8003818 <UART_SetConfig+0x348>
 8003736:	2308      	movs	r3, #8
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e06d      	b.n	8003818 <UART_SetConfig+0x348>
 800373c:	2310      	movs	r3, #16
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e06a      	b.n	8003818 <UART_SetConfig+0x348>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <UART_SetConfig+0x2e4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d138      	bne.n	80037be <UART_SetConfig+0x2ee>
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <UART_SetConfig+0x2cc>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003756:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800375a:	d017      	beq.n	800378c <UART_SetConfig+0x2bc>
 800375c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003760:	d82a      	bhi.n	80037b8 <UART_SetConfig+0x2e8>
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003766:	d00b      	beq.n	8003780 <UART_SetConfig+0x2b0>
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d824      	bhi.n	80037b8 <UART_SetConfig+0x2e8>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <UART_SetConfig+0x2aa>
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003776:	d006      	beq.n	8003786 <UART_SetConfig+0x2b6>
 8003778:	e01e      	b.n	80037b8 <UART_SetConfig+0x2e8>
 800377a:	2300      	movs	r3, #0
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e04b      	b.n	8003818 <UART_SetConfig+0x348>
 8003780:	2302      	movs	r3, #2
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e048      	b.n	8003818 <UART_SetConfig+0x348>
 8003786:	2304      	movs	r3, #4
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e045      	b.n	8003818 <UART_SetConfig+0x348>
 800378c:	2308      	movs	r3, #8
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e042      	b.n	8003818 <UART_SetConfig+0x348>
 8003792:	bf00      	nop
 8003794:	efff69f3 	.word	0xefff69f3
 8003798:	40011000 	.word	0x40011000
 800379c:	40023800 	.word	0x40023800
 80037a0:	40004400 	.word	0x40004400
 80037a4:	40004800 	.word	0x40004800
 80037a8:	40004c00 	.word	0x40004c00
 80037ac:	40005000 	.word	0x40005000
 80037b0:	40011400 	.word	0x40011400
 80037b4:	40007800 	.word	0x40007800
 80037b8:	2310      	movs	r3, #16
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e02c      	b.n	8003818 <UART_SetConfig+0x348>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a72      	ldr	r2, [pc, #456]	; (800398c <UART_SetConfig+0x4bc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d125      	bne.n	8003814 <UART_SetConfig+0x344>
 80037c8:	4b71      	ldr	r3, [pc, #452]	; (8003990 <UART_SetConfig+0x4c0>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037d6:	d017      	beq.n	8003808 <UART_SetConfig+0x338>
 80037d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037dc:	d817      	bhi.n	800380e <UART_SetConfig+0x33e>
 80037de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e2:	d00b      	beq.n	80037fc <UART_SetConfig+0x32c>
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e8:	d811      	bhi.n	800380e <UART_SetConfig+0x33e>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <UART_SetConfig+0x326>
 80037ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037f2:	d006      	beq.n	8003802 <UART_SetConfig+0x332>
 80037f4:	e00b      	b.n	800380e <UART_SetConfig+0x33e>
 80037f6:	2300      	movs	r3, #0
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e00d      	b.n	8003818 <UART_SetConfig+0x348>
 80037fc:	2302      	movs	r3, #2
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e00a      	b.n	8003818 <UART_SetConfig+0x348>
 8003802:	2304      	movs	r3, #4
 8003804:	77fb      	strb	r3, [r7, #31]
 8003806:	e007      	b.n	8003818 <UART_SetConfig+0x348>
 8003808:	2308      	movs	r3, #8
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e004      	b.n	8003818 <UART_SetConfig+0x348>
 800380e:	2310      	movs	r3, #16
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e001      	b.n	8003818 <UART_SetConfig+0x348>
 8003814:	2310      	movs	r3, #16
 8003816:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003820:	d15b      	bne.n	80038da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d828      	bhi.n	800387a <UART_SetConfig+0x3aa>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <UART_SetConfig+0x360>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003855 	.word	0x08003855
 8003834:	0800385d 	.word	0x0800385d
 8003838:	08003865 	.word	0x08003865
 800383c:	0800387b 	.word	0x0800387b
 8003840:	0800386b 	.word	0x0800386b
 8003844:	0800387b 	.word	0x0800387b
 8003848:	0800387b 	.word	0x0800387b
 800384c:	0800387b 	.word	0x0800387b
 8003850:	08003873 	.word	0x08003873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003854:	f7fe fd9c 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003858:	61b8      	str	r0, [r7, #24]
        break;
 800385a:	e013      	b.n	8003884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7fe fdac 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 8003860:	61b8      	str	r0, [r7, #24]
        break;
 8003862:	e00f      	b.n	8003884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <UART_SetConfig+0x4c4>)
 8003866:	61bb      	str	r3, [r7, #24]
        break;
 8003868:	e00c      	b.n	8003884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7fe fcbf 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 800386e:	61b8      	str	r0, [r7, #24]
        break;
 8003870:	e008      	b.n	8003884 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003876:	61bb      	str	r3, [r7, #24]
        break;
 8003878:	e004      	b.n	8003884 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	77bb      	strb	r3, [r7, #30]
        break;
 8003882:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d074      	beq.n	8003974 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	005a      	lsls	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d916      	bls.n	80038d4 <UART_SetConfig+0x404>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d212      	bcs.n	80038d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f023 030f 	bic.w	r3, r3, #15
 80038b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	89fb      	ldrh	r3, [r7, #14]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	89fa      	ldrh	r2, [r7, #14]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	e04f      	b.n	8003974 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77bb      	strb	r3, [r7, #30]
 80038d8:	e04c      	b.n	8003974 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038da:	7ffb      	ldrb	r3, [r7, #31]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d828      	bhi.n	8003932 <UART_SetConfig+0x462>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <UART_SetConfig+0x418>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	08003915 	.word	0x08003915
 80038f0:	0800391d 	.word	0x0800391d
 80038f4:	08003933 	.word	0x08003933
 80038f8:	08003923 	.word	0x08003923
 80038fc:	08003933 	.word	0x08003933
 8003900:	08003933 	.word	0x08003933
 8003904:	08003933 	.word	0x08003933
 8003908:	0800392b 	.word	0x0800392b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800390c:	f7fe fd40 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003910:	61b8      	str	r0, [r7, #24]
        break;
 8003912:	e013      	b.n	800393c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003914:	f7fe fd50 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 8003918:	61b8      	str	r0, [r7, #24]
        break;
 800391a:	e00f      	b.n	800393c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <UART_SetConfig+0x4c4>)
 800391e:	61bb      	str	r3, [r7, #24]
        break;
 8003920:	e00c      	b.n	800393c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003922:	f7fe fc63 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8003926:	61b8      	str	r0, [r7, #24]
        break;
 8003928:	e008      	b.n	800393c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392e:	61bb      	str	r3, [r7, #24]
        break;
 8003930:	e004      	b.n	800393c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	77bb      	strb	r3, [r7, #30]
        break;
 800393a:	bf00      	nop
    }

    if (pclk != 0U)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	085a      	lsrs	r2, r3, #1
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b0f      	cmp	r3, #15
 800395a:	d909      	bls.n	8003970 <UART_SetConfig+0x4a0>
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d205      	bcs.n	8003970 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	e001      	b.n	8003974 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003980:	7fbb      	ldrb	r3, [r7, #30]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40007c00 	.word	0x40007c00
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400

08003998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01a      	beq.n	8003aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a96:	d10a      	bne.n	8003aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aec:	f7fd f934 	bl	8000d58 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d10e      	bne.n	8003b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f81b 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e011      	b.n	8003b42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b09c      	sub	sp, #112	; 0x70
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5a:	e0a7      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	f000 80a3 	beq.w	8003cac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fd f8f7 	bl	8000d58 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x32>
 8003b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d13f      	bne.n	8003bfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b90:	667b      	str	r3, [r7, #100]	; 0x64
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e6      	bne.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bce:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e068      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d050      	beq.n	8003cac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c18:	d148      	bne.n	8003cac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
 8003c44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e6      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	613b      	str	r3, [r7, #16]
   return(result);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3308      	adds	r3, #8
 8003c74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c76:	623a      	str	r2, [r7, #32]
 8003c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	69f9      	ldr	r1, [r7, #28]
 8003c7c:	6a3a      	ldr	r2, [r7, #32]
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e5      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e010      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	f43f af48 	beq.w	8003b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3770      	adds	r7, #112	; 0x70
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b095      	sub	sp, #84	; 0x54
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003cfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e6      	bne.n	8003cde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d118      	bne.n	8003d7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f023 0310 	bic.w	r3, r3, #16
 8003d60:	647b      	str	r3, [r7, #68]	; 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	613b      	str	r3, [r7, #16]
   return(result);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e6      	bne.n	8003d4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d92:	bf00      	nop
 8003d94:	3754      	adds	r7, #84	; 0x54
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7ff fb71 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b088      	sub	sp, #32
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e6      	bne.n	8003dd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fb3d 	bl	8003490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e16:	bf00      	nop
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <__libc_init_array>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4d0d      	ldr	r5, [pc, #52]	; (8003e58 <__libc_init_array+0x38>)
 8003e24:	4c0d      	ldr	r4, [pc, #52]	; (8003e5c <__libc_init_array+0x3c>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	42a6      	cmp	r6, r4
 8003e2e:	d109      	bne.n	8003e44 <__libc_init_array+0x24>
 8003e30:	4d0b      	ldr	r5, [pc, #44]	; (8003e60 <__libc_init_array+0x40>)
 8003e32:	4c0c      	ldr	r4, [pc, #48]	; (8003e64 <__libc_init_array+0x44>)
 8003e34:	f000 f820 	bl	8003e78 <_init>
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	42a6      	cmp	r6, r4
 8003e40:	d105      	bne.n	8003e4e <__libc_init_array+0x2e>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e48:	4798      	blx	r3
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7ee      	b.n	8003e2c <__libc_init_array+0xc>
 8003e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e52:	4798      	blx	r3
 8003e54:	3601      	adds	r6, #1
 8003e56:	e7f2      	b.n	8003e3e <__libc_init_array+0x1e>
 8003e58:	08003ec4 	.word	0x08003ec4
 8003e5c:	08003ec4 	.word	0x08003ec4
 8003e60:	08003ec4 	.word	0x08003ec4
 8003e64:	08003ec8 	.word	0x08003ec8

08003e68 <memset>:
 8003e68:	4402      	add	r2, r0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d100      	bne.n	8003e72 <memset+0xa>
 8003e70:	4770      	bx	lr
 8003e72:	f803 1b01 	strb.w	r1, [r3], #1
 8003e76:	e7f9      	b.n	8003e6c <memset+0x4>

08003e78 <_init>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr

08003e84 <_fini>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr
