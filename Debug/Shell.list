
Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c58  08004c58  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08004c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  2000010c  08004d6c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08004d6c  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c688  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbd  00000000  00000000  0002c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002e788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d24  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d139  00000000  00000000  000554fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e66ac  00000000  00000000  00062635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002430  00000000  00000000  00148d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004aa0 	.word	0x08004aa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000110 	.word	0x20000110
 800020c:	08004aa0 	.word	0x08004aa0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_DMA_Init+0x48>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0f      	ldr	r2, [pc, #60]	; (800062c <MX_DMA_Init+0x48>)
 80005f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_DMA_Init+0x48>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	203a      	movs	r0, #58	; 0x3a
 8000608:	f000 fe51 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800060c:	203a      	movs	r0, #58	; 0x3a
 800060e:	f000 fe6a 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2046      	movs	r0, #70	; 0x46
 8000618:	f000 fe49 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800061c:	2046      	movs	r0, #70	; 0x46
 800061e:	f000 fe62 	bl	80012e6 <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <shfctn_valuereturn>:
#include <stdio.h>




void shfctn_valuereturn(uint8_t argc, argv_t argv){
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
	uint8_t size,i;
	char * buffer;
	for(i = 0; argv[1][i] != '\0'; i++){
 800063c:	2300      	movs	r3, #0
 800063e:	75fb      	strb	r3, [r7, #23]
 8000640:	e019      	b.n	8000676 <shfctn_valuereturn+0x46>
		size = sprintf(buffer,"the hexa value of %c is 0x%X\r\n",argv[1][i],argv[1][i]);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f103 020a 	add.w	r2, r3, #10
 8000648:	7dfb      	ldrb	r3, [r7, #23]
 800064a:	5cd3      	ldrb	r3, [r2, r3]
 800064c:	4619      	mov	r1, r3
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f103 020a 	add.w	r2, r3, #10
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	460a      	mov	r2, r1
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <shfctn_valuereturn+0x60>)
 800065c:	6938      	ldr	r0, [r7, #16]
 800065e:	f003 fdb1 	bl	80041c4 <siprintf>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
		sh_write((char *)buffer, size);
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	4619      	mov	r1, r3
 800066a:	6938      	ldr	r0, [r7, #16]
 800066c:	f000 f8d6 	bl	800081c <sh_write>
	for(i = 0; argv[1][i] != '\0'; i++){
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	3301      	adds	r3, #1
 8000674:	75fb      	strb	r3, [r7, #23]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	f103 020a 	add.w	r2, r3, #10
 800067c:	7dfb      	ldrb	r3, [r7, #23]
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1de      	bne.n	8000642 <shfctn_valuereturn+0x12>
	}

}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	08004ab8 	.word	0x08004ab8

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0x5c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fca1 	bl	800103e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f81a 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff ffc8 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f7ff ff6e 	bl	80005e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000708:	f000 fb52 	bl	8000db0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sh_init(&huart1);
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <main+0x30>)
 800070e:	f000 f95b 	bl	80009c8 <sh_init>
  sh_add("valueof", shfctn_valuereturn, "return the value of the char in a string\r\n");
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <main+0x34>)
 8000714:	4905      	ldr	r1, [pc, #20]	; (800072c <main+0x38>)
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <main+0x3c>)
 8000718:	f000 f914 	bl	8000944 <sh_add>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sh_run();
 800071c:	f000 f972 	bl	8000a04 <sh_run>
 8000720:	e7fc      	b.n	800071c <main+0x28>
 8000722:	bf00      	nop
 8000724:	2000048c 	.word	0x2000048c
 8000728:	08004ad8 	.word	0x08004ad8
 800072c:	08000631 	.word	0x08000631
 8000730:	08004b04 	.word	0x08004b04

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fd36 	bl	80041b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <SystemClock_Config+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a25      	ldr	r2, [pc, #148]	; (800080c <SystemClock_Config+0xd8>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <SystemClock_Config+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800079c:	2319      	movs	r3, #25
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007aa:	2309      	movs	r3, #9
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fb2a 	bl	8001e0c <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007be:	f000 f827 	bl	8000810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c2:	f001 fad3 	bl	8001d6c <HAL_PWREx_EnableOverDrive>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007cc:	f000 f820 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2106      	movs	r1, #6
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fdb0 	bl	8002354 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007fa:	f000 f809 	bl	8000810 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <sh_write>:
static const char sh_new_line[] = "> ";
char sh_welcome_text[] = "\r\n***********************\r\n*                     *\r\n*     shell v1.0      *\r\n*     Sami Asfary     *\r\n*                     *\r\n***********************\r\n";

static h_shell_t h_shell;

void sh_write(const char * str, char lenght){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(h_shell.hal_huart, (uint8_t*) str, lenght, HAL_MAX_DELAY);
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <sh_write+0x28>)
 800082a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	b29a      	uxth	r2, r3
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f002 fbb0 	bl	8002f9c <HAL_UART_Transmit>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000128 	.word	0x20000128

08000848 <shfctn_help>:

void shfctn_help(uint8_t argc, argv_t argv){
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
	if(argc <= 1){
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d82e      	bhi.n	80008b8 <shfctn_help+0x70>
		sh_write("Usage of the help command is as follow : \"help [command]\"\r\nAvailable function :\r\n", strlen("Usage of the help command is as follow : \"help [command]\"\r\nAvailable function :\r\n"));
 800085a:	2151      	movs	r1, #81	; 0x51
 800085c:	4836      	ldr	r0, [pc, #216]	; (8000938 <shfctn_help+0xf0>)
 800085e:	f7ff ffdd 	bl	800081c <sh_write>
		for(int i = 0; i < h_shell.function_count;i++){
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	e01f      	b.n	80008a8 <shfctn_help+0x60>
			sh_write(h_shell.function_list[i].string_cmd, strlen(h_shell.function_list[i].string_cmd));
 8000868:	4934      	ldr	r1, [pc, #208]	; (800093c <shfctn_help+0xf4>)
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	440b      	add	r3, r1
 8000876:	681c      	ldr	r4, [r3, #0]
 8000878:	4930      	ldr	r1, [pc, #192]	; (800093c <shfctn_help+0xf4>)
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fccb 	bl	8000224 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4619      	mov	r1, r3
 8000894:	4620      	mov	r0, r4
 8000896:	f7ff ffc1 	bl	800081c <sh_write>
			sh_write(sh_returnline,2);
 800089a:	2102      	movs	r1, #2
 800089c:	4828      	ldr	r0, [pc, #160]	; (8000940 <shfctn_help+0xf8>)
 800089e:	f7ff ffbd 	bl	800081c <sh_write>
		for(int i = 0; i < h_shell.function_count;i++){
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <shfctn_help+0xf4>)
 80008aa:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4293      	cmp	r3, r2
 80008b4:	dbd8      	blt.n	8000868 <shfctn_help+0x20>
				sh_write(h_shell.function_list[i].cmd_description, strlen(h_shell.function_list[i].cmd_description));
				break;
			}
		}
	}
}
 80008b6:	e03a      	b.n	800092e <shfctn_help+0xe6>
		for(int i = 0; i < h_shell.function_count;i++){
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	e030      	b.n	8000920 <shfctn_help+0xd8>
			if(strcmp(h_shell.function_list[i].string_cmd, argv[1]) == 0){
 80008be:	491f      	ldr	r1, [pc, #124]	; (800093c <shfctn_help+0xf4>)
 80008c0:	68ba      	ldr	r2, [r7, #8]
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	330a      	adds	r3, #10
 80008d2:	4619      	mov	r1, r3
 80008d4:	4610      	mov	r0, r2
 80008d6:	f7ff fc9b 	bl	8000210 <strcmp>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11c      	bne.n	800091a <shfctn_help+0xd2>
				sh_write(h_shell.function_list[i].cmd_description, strlen(h_shell.function_list[i].cmd_description));
 80008e0:	4916      	ldr	r1, [pc, #88]	; (800093c <shfctn_help+0xf4>)
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	440b      	add	r3, r1
 80008ee:	3308      	adds	r3, #8
 80008f0:	681c      	ldr	r4, [r3, #0]
 80008f2:	4912      	ldr	r1, [pc, #72]	; (800093c <shfctn_help+0xf4>)
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	440b      	add	r3, r1
 8000900:	3308      	adds	r3, #8
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fc8d 	bl	8000224 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	4620      	mov	r0, r4
 8000912:	f7ff ff83 	bl	800081c <sh_write>
				break;
 8000916:	bf00      	nop
}
 8000918:	e009      	b.n	800092e <shfctn_help+0xe6>
		for(int i = 0; i < h_shell.function_count;i++){
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <shfctn_help+0xf4>)
 8000922:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8000926:	461a      	mov	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4293      	cmp	r3, r2
 800092c:	dbc7      	blt.n	80008be <shfctn_help+0x76>
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bd90      	pop	{r4, r7, pc}
 8000936:	bf00      	nop
 8000938:	08004b0c 	.word	0x08004b0c
 800093c:	20000128 	.word	0x20000128
 8000940:	08004bf0 	.word	0x08004bf0

08000944 <sh_add>:

void sh_add(char * command, void(* pcommand)(uint8_t argc, argv_t argv), char * description){
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
	if(h_shell.function_count < SH_MAX_FUNCTION){
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <sh_add+0x80>)
 8000952:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8000956:	2b18      	cmp	r3, #24
 8000958:	d82d      	bhi.n	80009b6 <sh_add+0x72>
		h_shell.function_list[h_shell.function_count].string_cmd = command;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <sh_add+0x80>)
 800095c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8000960:	4619      	mov	r1, r3
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <sh_add+0x80>)
 8000964:	460b      	mov	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	601a      	str	r2, [r3, #0]
		h_shell.function_list[h_shell.function_count].pcmd_function = pcommand;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <sh_add+0x80>)
 8000974:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8000978:	4619      	mov	r1, r3
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <sh_add+0x80>)
 800097c:	460b      	mov	r3, r1
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	440b      	add	r3, r1
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	3304      	adds	r3, #4
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	601a      	str	r2, [r3, #0]
		h_shell.function_list[h_shell.function_count].cmd_description = description;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <sh_add+0x80>)
 800098e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8000992:	4619      	mov	r1, r3
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <sh_add+0x80>)
 8000996:	460b      	mov	r3, r1
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	440b      	add	r3, r1
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	3308      	adds	r3, #8
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
		h_shell.function_count++;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <sh_add+0x80>)
 80009a8:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80009ac:	3301      	adds	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <sh_add+0x80>)
 80009b2:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	}
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000128 	.word	0x20000128

080009c8 <sh_init>:

void sh_init(UART_HandleTypeDef *huart){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	h_shell.function_count = 0;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <sh_init+0x2c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	h_shell.hal_huart = huart;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <sh_init+0x2c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	sh_add("help",shfctn_help,"Usage of the help command is as follow : \"help [command]\"\r\nThis command display a brief summary of command built into this shell\r\n\0");
 80009e0:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <sh_init+0x30>)
 80009e2:	4906      	ldr	r1, [pc, #24]	; (80009fc <sh_init+0x34>)
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <sh_init+0x38>)
 80009e6:	f7ff ffad 	bl	8000944 <sh_add>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000128 	.word	0x20000128
 80009f8:	08004b60 	.word	0x08004b60
 80009fc:	08000849 	.word	0x08000849
 8000a00:	08004be4 	.word	0x08004be4

08000a04 <sh_run>:

void sh_run(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	sh_write(sh_welcome_text, strlen(sh_welcome_text));
 8000a0a:	4838      	ldr	r0, [pc, #224]	; (8000aec <sh_run+0xe8>)
 8000a0c:	f7ff fc0a 	bl	8000224 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4619      	mov	r1, r3
 8000a16:	4835      	ldr	r0, [pc, #212]	; (8000aec <sh_run+0xe8>)
 8000a18:	f7ff ff00 	bl	800081c <sh_write>
	sh_write(sh_new_line, 2);
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4834      	ldr	r0, [pc, #208]	; (8000af0 <sh_run+0xec>)
 8000a20:	f7ff fefc 	bl	800081c <sh_write>

	char character[1];
	while(1){
		HAL_UART_Receive(h_shell.hal_huart, (uint8_t *)character, 1,HAL_MAX_DELAY);
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <sh_run+0xf0>)
 8000a26:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 8000a2a:	1d39      	adds	r1, r7, #4
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2201      	movs	r2, #1
 8000a32:	f002 fb36 	bl	80030a2 <HAL_UART_Receive>
		switch(character[0]){
 8000a36:	793b      	ldrb	r3, [r7, #4]
 8000a38:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3a:	d022      	beq.n	8000a82 <sh_run+0x7e>
 8000a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3e:	dc3b      	bgt.n	8000ab8 <sh_run+0xb4>
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d01e      	beq.n	8000a82 <sh_run+0x7e>
 8000a44:	2b0d      	cmp	r3, #13
 8000a46:	d137      	bne.n	8000ab8 <sh_run+0xb4>
		case '\r' :
			sh_write("\r\n", 2);
 8000a48:	2102      	movs	r1, #2
 8000a4a:	482b      	ldr	r0, [pc, #172]	; (8000af8 <sh_run+0xf4>)
 8000a4c:	f7ff fee6 	bl	800081c <sh_write>
			h_shell.sh_cmd_current[h_shell.sh_line_ptr] = '\0';
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <sh_run+0xf0>)
 8000a52:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <sh_run+0xf0>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			if(h_shell.sh_line_ptr != 0){
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <sh_run+0xf0>)
 8000a64:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <sh_run+0x6c>
				sh_command_resolve();
 8000a6c:	f000 f848 	bl	8000b00 <sh_command_resolve>
			}
			sh_write(sh_new_line, 2);
 8000a70:	2102      	movs	r1, #2
 8000a72:	481f      	ldr	r0, [pc, #124]	; (8000af0 <sh_run+0xec>)
 8000a74:	f7ff fed2 	bl	800081c <sh_write>
			h_shell.sh_line_ptr = 0;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <sh_run+0xf0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
			break;
 8000a80:	e032      	b.n	8000ae8 <sh_run+0xe4>
		case '\b':
		case '\177':
			if(h_shell.sh_line_ptr != 0){
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <sh_run+0xf0>)
 8000a84:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d02c      	beq.n	8000ae6 <sh_run+0xe2>
				sh_write(sh_backspace, 3);
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	481b      	ldr	r0, [pc, #108]	; (8000afc <sh_run+0xf8>)
 8000a90:	f7ff fec4 	bl	800081c <sh_write>
				h_shell.sh_line_ptr--;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <sh_run+0xf0>)
 8000a96:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <sh_run+0xf0>)
 8000aa0:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
				h_shell.sh_cmd_current[h_shell.sh_line_ptr] = '\0';
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <sh_run+0xf0>)
 8000aa6:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <sh_run+0xf0>)
 8000aae:	4413      	add	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			}
			break;
 8000ab6:	e016      	b.n	8000ae6 <sh_run+0xe2>
		default :
			sh_write(character, 1);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2101      	movs	r1, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fead 	bl	800081c <sh_write>
			h_shell.sh_cmd_current[h_shell.sh_line_ptr] = character[0];
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <sh_run+0xf0>)
 8000ac4:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	793a      	ldrb	r2, [r7, #4]
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <sh_run+0xf0>)
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			h_shell.sh_line_ptr++;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <sh_run+0xf0>)
 8000ad6:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8000ada:	3301      	adds	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <sh_run+0xf0>)
 8000ae0:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
			break;
 8000ae4:	e000      	b.n	8000ae8 <sh_run+0xe4>
			break;
 8000ae6:	bf00      	nop
		HAL_UART_Receive(h_shell.hal_huart, (uint8_t *)character, 1,HAL_MAX_DELAY);
 8000ae8:	e79c      	b.n	8000a24 <sh_run+0x20>
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000
 8000af0:	08004bf8 	.word	0x08004bf8
 8000af4:	20000128 	.word	0x20000128
 8000af8:	08004bec 	.word	0x08004bec
 8000afc:	08004bf4 	.word	0x08004bf4

08000b00 <sh_command_resolve>:
		}
	}
}

void sh_command_resolve(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0
	uint8_t i = 1, last_space=0, argc = 0;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	argv_t argv;
	while(h_shell.sh_cmd_current[i-1] != '\0'){
 8000b18:	e056      	b.n	8000bc8 <sh_command_resolve+0xc8>
		if(h_shell.sh_cmd_current[i] == ' ' || h_shell.sh_cmd_current[i] == '\0'){
 8000b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b1e:	4a49      	ldr	r2, [pc, #292]	; (8000c44 <sh_command_resolve+0x144>)
 8000b20:	4413      	add	r3, r2
 8000b22:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8000b26:	2b20      	cmp	r3, #32
 8000b28:	d007      	beq.n	8000b3a <sh_command_resolve+0x3a>
 8000b2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b2e:	4a45      	ldr	r2, [pc, #276]	; (8000c44 <sh_command_resolve+0x144>)
 8000b30:	4413      	add	r3, r2
 8000b32:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d141      	bne.n	8000bbe <sh_command_resolve+0xbe>
		for(uint8_t j = last_space; j < i; j++){
 8000b3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000b42:	e01b      	b.n	8000b7c <sh_command_resolve+0x7c>
				argv[argc][j-last_space] = h_shell.sh_cmd_current[j];
 8000b44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000b48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000b4c:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8000b50:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8000b54:	1a41      	subs	r1, r0, r1
 8000b56:	483b      	ldr	r0, [pc, #236]	; (8000c44 <sh_command_resolve+0x144>)
 8000b58:	4403      	add	r3, r0
 8000b5a:	f893 0134 	ldrb.w	r0, [r3, #308]	; 0x134
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	3340      	adds	r3, #64	; 0x40
 8000b68:	443b      	add	r3, r7
 8000b6a:	440b      	add	r3, r1
 8000b6c:	3b40      	subs	r3, #64	; 0x40
 8000b6e:	4602      	mov	r2, r0
 8000b70:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = last_space; j < i; j++){
 8000b72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000b76:	3301      	adds	r3, #1
 8000b78:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000b7c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d3dd      	bcc.n	8000b44 <sh_command_resolve+0x44>
			}
			argv[argc][i-last_space] = '\0';
 8000b88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000b8c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8000b90:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b94:	1ac9      	subs	r1, r1, r3
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	3340      	adds	r3, #64	; 0x40
 8000ba0:	443b      	add	r3, r7
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3b40      	subs	r3, #64	; 0x40
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
			last_space = i+1;
 8000baa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bae:	3301      	adds	r3, #1
 8000bb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			argc++;
 8000bb4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000bb8:	3301      	adds	r3, #1
 8000bba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		}
		i++;
 8000bbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	while(h_shell.sh_cmd_current[i-1] != '\0'){
 8000bc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <sh_command_resolve+0x144>)
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d19f      	bne.n	8000b1a <sh_command_resolve+0x1a>
	}
	for(i = 0; i < h_shell.function_count; i++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000be0:	e024      	b.n	8000c2c <sh_command_resolve+0x12c>
		if(strcmp(argv[0], h_shell.function_list[i].string_cmd) == 0){
 8000be2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000be6:	4917      	ldr	r1, [pc, #92]	; (8000c44 <sh_command_resolve+0x144>)
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fb09 	bl	8000210 <strcmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10e      	bne.n	8000c22 <sh_command_resolve+0x122>
			h_shell.function_list[i].pcmd_function(argc,argv);
 8000c04:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000c08:	490e      	ldr	r1, [pc, #56]	; (8000c44 <sh_command_resolve+0x144>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3304      	adds	r3, #4
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4639      	mov	r1, r7
 8000c1a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4798      	blx	r3
	for(i = 0; i < h_shell.function_count; i++){
 8000c22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c26:	3301      	adds	r3, #1
 8000c28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <sh_command_resolve+0x144>)
 8000c2e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8000c32:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d3d3      	bcc.n	8000be2 <sh_command_resolve+0xe2>
		}
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	; 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000128 	.word	0x20000128

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f9ec 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <USART1_IRQHandler+0x10>)
 8000cea:	f002 fa9f 	bl	800322c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000048c 	.word	0x2000048c

08000cf8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <DMA2_Stream2_IRQHandler+0x10>)
 8000cfe:	f000 fc4d 	bl	800159c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000514 	.word	0x20000514

08000d0c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <DMA2_Stream7_IRQHandler+0x10>)
 8000d12:	f000 fc43 	bl	800159c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000574 	.word	0x20000574

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f003 fa06 	bl	8004160 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20050000 	.word	0x20050000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	20000488 	.word	0x20000488
 8000d88:	200005e8 	.word	0x200005e8

08000d8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000db6:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <MX_USART1_UART_Init+0x5c>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART1_UART_Init+0x58>)
 8000df4:	f002 f884 	bl	8002f00 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dfe:	f7ff fd07 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000048c 	.word	0x2000048c
 8000e0c:	40011000 	.word	0x40011000

08000e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0ac      	sub	sp, #176	; 0xb0
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	2284      	movs	r2, #132	; 0x84
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 f9bf 	bl	80041b4 <memset>
  if(uartHandle->Instance==USART1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a64      	ldr	r2, [pc, #400]	; (8000fcc <HAL_UART_MspInit+0x1bc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	f040 80c1 	bne.w	8000fc4 <HAL_UART_MspInit+0x1b4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e46:	2300      	movs	r3, #0
 8000e48:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fc66 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e5a:	f7ff fcd9 	bl	8000810 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5e:	4b5c      	ldr	r3, [pc, #368]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a5b      	ldr	r2, [pc, #364]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b59      	ldr	r3, [pc, #356]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a55      	ldr	r2, [pc, #340]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b53      	ldr	r3, [pc, #332]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b4d      	ldr	r3, [pc, #308]	; (8000fd0 <HAL_UART_MspInit+0x1c0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <HAL_UART_MspInit+0x1c4>)
 8000ecc:	f000 fda2 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eea:	2307      	movs	r3, #7
 8000eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4838      	ldr	r0, [pc, #224]	; (8000fd8 <HAL_UART_MspInit+0x1c8>)
 8000ef8:	f000 fd8c 	bl	8001a14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000efc:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000efe:	4a38      	ldr	r2, [pc, #224]	; (8000fe0 <HAL_UART_MspInit+0x1d0>)
 8000f00:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f3c:	4827      	ldr	r0, [pc, #156]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f3e:	f000 f9ed 	bl	800131c <HAL_DMA_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000f48:	f7ff fc62 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f50:	675a      	str	r2, [r3, #116]	; 0x74
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <HAL_UART_MspInit+0x1cc>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f5a:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <HAL_UART_MspInit+0x1d8>)
 8000f5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f64:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f68:	2240      	movs	r2, #64	; 0x40
 8000f6a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f78:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f98:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000f9a:	f000 f9bf 	bl	800131c <HAL_DMA_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_UART_MspInit+0x198>
    {
      Error_Handler();
 8000fa4:	f7ff fc34 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000fac:	671a      	str	r2, [r3, #112]	; 0x70
 8000fae:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_UART_MspInit+0x1d4>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2025      	movs	r0, #37	; 0x25
 8000fba:	f000 f978 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fbe:	2025      	movs	r0, #37	; 0x25
 8000fc0:	f000 f991 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	37b0      	adds	r7, #176	; 0xb0
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	20000514 	.word	0x20000514
 8000fe0:	40026440 	.word	0x40026440
 8000fe4:	20000574 	.word	0x20000574
 8000fe8:	400264b8 	.word	0x400264b8

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001008:	4c0b      	ldr	r4, [pc, #44]	; (8001038 <LoopFillZerobss+0x26>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001016:	f7ff feb9 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f003 f8a7 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fb69 	bl	80006f4 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001030:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 8001034:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001038:	200005e8 	.word	0x200005e8

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>

0800103e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	2003      	movs	r0, #3
 8001044:	f000 f928 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001048:	200f      	movs	r0, #15
 800104a:	f000 f805 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104e:	f7ff fdfb 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f943 	bl	8001302 <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f90b 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000009c 	.word	0x2000009c
 80010b0:	200000a4 	.word	0x200000a4
 80010b4:	200000a0 	.word	0x200000a0

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200000a4 	.word	0x200000a4
 80010dc:	200005d4 	.word	0x200005d4

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200005d4 	.word	0x200005d4

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	05fa0000 	.word	0x05fa0000

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <__NVIC_EnableIRQ+0x38>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff29 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff3e 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff31 	bl	800115c <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff feda 	bl	80010e0 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e099      	b.n	800146c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001358:	e00f      	b.n	800137a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800135a:	f7ff fec1 	bl	80010e0 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b05      	cmp	r3, #5
 8001366:	d908      	bls.n	800137a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e078      	b.n	800146c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1e8      	bne.n	800135a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_DMA_Init+0x158>)
 8001394:	4013      	ands	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d107      	bne.n	80013e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4313      	orrs	r3, r2
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f023 0307 	bic.w	r3, r3, #7
 80013fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	2b04      	cmp	r3, #4
 800140c:	d117      	bne.n	800143e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00e      	beq.n	800143e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa7b 	bl	800191c <DMA_CheckFifoParam>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800143a:	2301      	movs	r3, #1
 800143c:	e016      	b.n	800146c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fa32 	bl	80018b0 <DMA_CalcBaseAndBitshift>
 800144c:	4603      	mov	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	f010803f 	.word	0xf010803f

08001478 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001486:	f7ff fe2b 	bl	80010e0 <HAL_GetTick>
 800148a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d008      	beq.n	80014aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e052      	b.n	8001550 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0216 	bic.w	r2, r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <HAL_DMA_Abort+0x62>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0208 	bic.w	r2, r2, #8
 80014e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fa:	e013      	b.n	8001524 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fc:	f7ff fdf0 	bl	80010e0 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b05      	cmp	r3, #5
 8001508:	d90c      	bls.n	8001524 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2220      	movs	r2, #32
 800150e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e015      	b.n	8001550 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1e4      	bne.n	80014fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	223f      	movs	r2, #63	; 0x3f
 8001538:	409a      	lsls	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d004      	beq.n	8001576 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00c      	b.n	8001590 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015a8:	4b8e      	ldr	r3, [pc, #568]	; (80017e4 <HAL_DMA_IRQHandler+0x248>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a8e      	ldr	r2, [pc, #568]	; (80017e8 <HAL_DMA_IRQHandler+0x24c>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0a9b      	lsrs	r3, r3, #10
 80015b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	2208      	movs	r2, #8
 80015c8:	409a      	lsls	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01a      	beq.n	8001608 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0204 	bic.w	r2, r2, #4
 80015ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	2208      	movs	r2, #8
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2201      	movs	r2, #1
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d012      	beq.n	800163e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	2201      	movs	r2, #1
 800162c:	409a      	lsls	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001636:	f043 0202 	orr.w	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	2204      	movs	r2, #4
 8001644:	409a      	lsls	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d012      	beq.n	8001674 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	2204      	movs	r2, #4
 8001662:	409a      	lsls	r2, r3
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	f043 0204 	orr.w	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2210      	movs	r2, #16
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d043      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d03c      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	2210      	movs	r2, #16
 8001698:	409a      	lsls	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d018      	beq.n	80016de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d024      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
 80016ca:	e01f      	b.n	800170c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01b      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	4798      	blx	r3
 80016dc:	e016      	b.n	800170c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0208 	bic.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001710:	2220      	movs	r2, #32
 8001712:	409a      	lsls	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 808f 	beq.w	800183c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8087 	beq.w	800183c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001732:	2220      	movs	r2, #32
 8001734:	409a      	lsls	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b05      	cmp	r3, #5
 8001744:	d136      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0216 	bic.w	r2, r2, #22
 8001754:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001764:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <HAL_DMA_IRQHandler+0x1da>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0208 	bic.w	r2, r2, #8
 8001784:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	223f      	movs	r2, #63	; 0x3f
 800178c:	409a      	lsls	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d07e      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
        }
        return;
 80017b2:	e079      	b.n	80018a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d01d      	beq.n	80017fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10d      	bne.n	80017ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d031      	beq.n	800183c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
 80017e0:	e02c      	b.n	800183c <HAL_DMA_IRQHandler+0x2a0>
 80017e2:	bf00      	nop
 80017e4:	2000009c 	.word	0x2000009c
 80017e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d023      	beq.n	800183c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e01e      	b.n	800183c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10f      	bne.n	800182c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0210 	bic.w	r2, r2, #16
 800181a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	2b00      	cmp	r3, #0
 8001842:	d032      	beq.n	80018aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d022      	beq.n	8001896 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2205      	movs	r2, #5
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3301      	adds	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	429a      	cmp	r2, r3
 8001872:	d307      	bcc.n	8001884 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f2      	bne.n	8001868 <HAL_DMA_IRQHandler+0x2cc>
 8001882:	e000      	b.n	8001886 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001884:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
 80018a6:	e000      	b.n	80018aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80018a8:	bf00      	nop
    }
  }
}
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3b10      	subs	r3, #16
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <DMA_CalcBaseAndBitshift+0x60>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <DMA_CalcBaseAndBitshift+0x64>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d908      	bls.n	80018f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <DMA_CalcBaseAndBitshift+0x68>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	1d1a      	adds	r2, r3, #4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	659a      	str	r2, [r3, #88]	; 0x58
 80018ee:	e006      	b.n	80018fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <DMA_CalcBaseAndBitshift+0x68>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	aaaaaaab 	.word	0xaaaaaaab
 8001914:	08004c14 	.word	0x08004c14
 8001918:	fffffc00 	.word	0xfffffc00

0800191c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11f      	bne.n	8001976 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d856      	bhi.n	80019ea <DMA_CheckFifoParam+0xce>
 800193c:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <DMA_CheckFifoParam+0x28>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001955 	.word	0x08001955
 8001948:	08001967 	.word	0x08001967
 800194c:	08001955 	.word	0x08001955
 8001950:	080019eb 	.word	0x080019eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d046      	beq.n	80019ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001964:	e043      	b.n	80019ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800196e:	d140      	bne.n	80019f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001974:	e03d      	b.n	80019f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800197e:	d121      	bne.n	80019c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d837      	bhi.n	80019f6 <DMA_CheckFifoParam+0xda>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <DMA_CheckFifoParam+0x70>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019a3 	.word	0x080019a3
 8001994:	0800199d 	.word	0x0800199d
 8001998:	080019b5 	.word	0x080019b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      break;
 80019a0:	e030      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d025      	beq.n	80019fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b2:	e022      	b.n	80019fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019bc:	d11f      	bne.n	80019fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019c2:	e01c      	b.n	80019fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d903      	bls.n	80019d2 <DMA_CheckFifoParam+0xb6>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d003      	beq.n	80019d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019d0:	e018      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      break;
 80019d6:	e015      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      break;
 80019e8:	e00b      	b.n	8001a02 <DMA_CheckFifoParam+0xe6>
      break;
 80019ea:	bf00      	nop
 80019ec:	e00a      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019ee:	bf00      	nop
 80019f0:	e008      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019f2:	bf00      	nop
 80019f4:	e006      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019f6:	bf00      	nop
 80019f8:	e004      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 80019fa:	bf00      	nop
 80019fc:	e002      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;   
 80019fe:	bf00      	nop
 8001a00:	e000      	b.n	8001a04 <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
    }
  } 
  
  return status; 
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e175      	b.n	8001d20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8164 	bne.w	8001d1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <HAL_GPIO_Init+0x56>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d130      	bne.n	8001acc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d017      	beq.n	8001b08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d123      	bne.n	8001b5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80be 	beq.w	8001d1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <HAL_GPIO_Init+0x324>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a65      	ldr	r2, [pc, #404]	; (8001d38 <HAL_GPIO_Init+0x324>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_GPIO_Init+0x324>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bb6:	4a61      	ldr	r2, [pc, #388]	; (8001d3c <HAL_GPIO_Init+0x328>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a58      	ldr	r2, [pc, #352]	; (8001d40 <HAL_GPIO_Init+0x32c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d037      	beq.n	8001c52 <HAL_GPIO_Init+0x23e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_GPIO_Init+0x330>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d031      	beq.n	8001c4e <HAL_GPIO_Init+0x23a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a56      	ldr	r2, [pc, #344]	; (8001d48 <HAL_GPIO_Init+0x334>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02b      	beq.n	8001c4a <HAL_GPIO_Init+0x236>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_GPIO_Init+0x338>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x232>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <HAL_GPIO_Init+0x33c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x22e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a53      	ldr	r2, [pc, #332]	; (8001d54 <HAL_GPIO_Init+0x340>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x22a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_GPIO_Init+0x344>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x226>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_GPIO_Init+0x348>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x222>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <HAL_GPIO_Init+0x34c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x21e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <HAL_GPIO_Init+0x350>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x21a>
 8001c2a:	2309      	movs	r3, #9
 8001c2c:	e012      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c2e:	230a      	movs	r3, #10
 8001c30:	e010      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e00e      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e00c      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00a      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c3e:	2305      	movs	r3, #5
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x240>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <HAL_GPIO_Init+0x328>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c96:	4a34      	ldr	r2, [pc, #208]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc0:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_GPIO_Init+0x354>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f ae86 	bls.w	8001a34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40022000 	.word	0x40022000
 8001d64:	40022400 	.word	0x40022400
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9a:	f7ff f9a1 	bl	80010e0 <HAL_GetTick>
 8001d9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001da0:	e009      	b.n	8001db6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001da2:	f7ff f99d 	bl	80010e0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db0:	d901      	bls.n	8001db6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e022      	b.n	8001dfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7ff f986 	bl	80010e0 <HAL_GetTick>
 8001dd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dd6:	e009      	b.n	8001dec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd8:	f7ff f982 	bl	80010e0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de6:	d901      	bls.n	8001dec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e007      	b.n	8001dfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e291      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e30:	4b96      	ldr	r3, [pc, #600]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3c:	4b93      	ldr	r3, [pc, #588]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d112      	bne.n	8001e6e <HAL_RCC_OscConfig+0x62>
 8001e48:	4b90      	ldr	r3, [pc, #576]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e56:	4b8d      	ldr	r3, [pc, #564]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x130>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d168      	bne.n	8001f3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e26b      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x7a>
 8001e78:	4b84      	ldr	r3, [pc, #528]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a83      	ldr	r2, [pc, #524]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e02e      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x9c>
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7e      	ldr	r2, [pc, #504]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b7c      	ldr	r3, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7b      	ldr	r2, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e01d      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a72      	ldr	r2, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd8>
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6b      	ldr	r2, [pc, #428]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff f8f8 	bl	80010e0 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f8f4 	bl	80010e0 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e21f      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff f8e4 	bl	80010e0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff f8e0 	bl	80010e0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e20b      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	4b57      	ldr	r3, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x110>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d069      	beq.n	800201e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x190>
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x17a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e1df      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	493d      	ldr	r1, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	e040      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f896 	bl	80010e0 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f892 	bl	80010e0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1bd      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4929      	ldr	r1, [pc, #164]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
 8001fea:	e018      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f872 	bl	80010e0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff f86e 	bl	80010e0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e199      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d038      	beq.n	800209c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d019      	beq.n	8002066 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff f84f 	bl	80010e0 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff f84b 	bl	80010e0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e176      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_RCC_OscConfig+0x280>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x23a>
 8002064:	e01a      	b.n	800209c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x280>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_RCC_OscConfig+0x280>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f835 	bl	80010e0 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff f831 	bl	80010e0 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d903      	bls.n	8002090 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e15c      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
 800208c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a4 	beq.w	80021f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a87      	ldr	r2, [pc, #540]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b85      	ldr	r3, [pc, #532]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d2:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020de:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7e      	ldr	r2, [pc, #504]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fff9 	bl	80010e0 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe fff5 	bl	80010e0 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	; 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e120      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002104:	4b75      	ldr	r3, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x4d0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x31a>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	e02d      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x33c>
 800212e:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	e01c      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x35e>
 8002150:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	4b5e      	ldr	r3, [pc, #376]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	e00b      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
 800216a:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a57      	ldr	r2, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7fe ffa9 	bl	80010e0 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe ffa5 	bl	80010e0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0ce      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	4b4b      	ldr	r3, [pc, #300]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ee      	beq.n	8002192 <HAL_RCC_OscConfig+0x386>
 80021b4:	e014      	b.n	80021e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7fe ff93 	bl	80010e0 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe ff8f 	bl	80010e0 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80a4 	beq.w	8002344 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d06b      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d149      	bne.n	80022a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe ff60 	bl	80010e0 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe ff5c 	bl	80010e0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e087      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	4313      	orrs	r3, r2
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 800226a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800226e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff30 	bl	80010e0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe ff2c 	bl	80010e0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e057      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x478>
 80022a2:	e04f      	b.n	8002344 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80022aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff16 	bl	80010e0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe ff12 	bl	80010e0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e03d      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4ac>
 80022d6:	e035      	b.n	8002344 <HAL_RCC_OscConfig+0x538>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x544>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d028      	beq.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d11a      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002316:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002318:	4293      	cmp	r3, r2
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	3b01      	subs	r3, #1
 800232a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d0      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b67      	ldr	r3, [pc, #412]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	4965      	ldr	r1, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d040      	beq.n	8002478 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d115      	bne.n	8002436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e073      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4936      	ldr	r1, [pc, #216]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002448:	f7fe fe4a 	bl	80010e0 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe fe46 	bl	80010e0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e053      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d210      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 020f 	bic.w	r2, r3, #15
 800248e:	4922      	ldr	r1, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1d0>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fda6 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	08004bfc 	.word	0x08004bfc
 8002524:	2000009c 	.word	0x2000009c
 8002528:	200000a0 	.word	0x200000a0

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b090      	sub	sp, #64	; 0x40
 8002532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
 8002538:	2300      	movs	r3, #0
 800253a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d00d      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002550:	2b08      	cmp	r3, #8
 8002552:	f200 80a1 	bhi.w	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x3a>
 800255e:	e09b      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002564:	e09b      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800256a:	e098      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256c:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d028      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	2200      	movs	r2, #0
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	627a      	str	r2, [r7, #36]	; 0x24
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002594:	2100      	movs	r1, #0
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002598:	fb03 f201 	mul.w	r2, r3, r1
 800259c:	2300      	movs	r3, #0
 800259e:	fb00 f303 	mul.w	r3, r0, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80025a6:	fba0 1202 	umull	r1, r2, r0, r2
 80025aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ac:	460a      	mov	r2, r1
 80025ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80025b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b2:	4413      	add	r3, r2
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	2200      	movs	r2, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025c6:	f7fd fe8b 	bl	80002e0 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4613      	mov	r3, r2
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d2:	e053      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	2200      	movs	r2, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	617a      	str	r2, [r7, #20]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025e6:	f04f 0b00 	mov.w	fp, #0
 80025ea:	4652      	mov	r2, sl
 80025ec:	465b      	mov	r3, fp
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fc:	0150      	lsls	r0, r2, #5
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ebb2 080a 	subs.w	r8, r2, sl
 8002606:	eb63 090b 	sbc.w	r9, r3, fp
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800261a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800261e:	ebb2 0408 	subs.w	r4, r2, r8
 8002622:	eb63 0509 	sbc.w	r5, r3, r9
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	00eb      	lsls	r3, r5, #3
 8002630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002634:	00e2      	lsls	r2, r4, #3
 8002636:	4614      	mov	r4, r2
 8002638:	461d      	mov	r5, r3
 800263a:	eb14 030a 	adds.w	r3, r4, sl
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	eb45 030b 	adc.w	r3, r5, fp
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002652:	4629      	mov	r1, r5
 8002654:	028b      	lsls	r3, r1, #10
 8002656:	4621      	mov	r1, r4
 8002658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800265c:	4621      	mov	r1, r4
 800265e:	028a      	lsls	r2, r1, #10
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	2200      	movs	r2, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	60fa      	str	r2, [r7, #12]
 800266c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002670:	f7fd fe36 	bl	80002e0 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0x180>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800268c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002696:	e002      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800269c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3740      	adds	r7, #64	; 0x40
 80026a4:	46bd      	mov	sp, r7
 80026a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	017d7840 	.word	0x017d7840

080026b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000009c 	.word	0x2000009c

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08004c0c 	.word	0x08004c0c

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffdc 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08004c0c 	.word	0x08004c0c

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002748:	4b69      	ldr	r3, [pc, #420]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002752:	6093      	str	r3, [r2, #8]
 8002754:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	4964      	ldr	r1, [pc, #400]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d017      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800277a:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	4959      	ldr	r1, [pc, #356]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002798:	d101      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800279a:	2301      	movs	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d017      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027b6:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	494a      	ldr	r1, [pc, #296]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 808b 	beq.w	800291a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4a39      	ldr	r2, [pc, #228]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6413      	str	r3, [r2, #64]	; 0x40
 8002810:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800281c:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe fc5a 	bl	80010e0 <HAL_GetTick>
 800282c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7fe fc56 	bl	80010e0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e357      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002856:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d035      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d02e      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286c:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002874:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a1a      	ldr	r2, [pc, #104]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800288e:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d114      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fc1e 	bl	80010e0 <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	e00a      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7fe fc1a 	bl	80010e0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e319      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ee      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028d6:	d111      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	4901      	ldr	r1, [pc, #4]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
 80028ee:	e00b      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000
 80028f8:	0ffffcff 	.word	0x0ffffcff
 80028fc:	4baa      	ldr	r3, [pc, #680]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4aa9      	ldr	r2, [pc, #676]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002902:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	4ba7      	ldr	r3, [pc, #668]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	49a4      	ldr	r1, [pc, #656]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002916:	4313      	orrs	r3, r2
 8002918:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800292c:	4a9e      	ldr	r2, [pc, #632]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002932:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002936:	4b9c      	ldr	r3, [pc, #624]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002938:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	4999      	ldr	r1, [pc, #612]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002954:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002962:	4991      	ldr	r1, [pc, #580]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002976:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002984:	4988      	ldr	r1, [pc, #544]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002998:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a6:	4980      	ldr	r1, [pc, #512]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ba:	4b7b      	ldr	r3, [pc, #492]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4977      	ldr	r1, [pc, #476]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029dc:	4b72      	ldr	r3, [pc, #456]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	496f      	ldr	r1, [pc, #444]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fe:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f023 020c 	bic.w	r2, r3, #12
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	4966      	ldr	r1, [pc, #408]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	495e      	ldr	r1, [pc, #376]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a42:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	4955      	ldr	r1, [pc, #340]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	494d      	ldr	r1, [pc, #308]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a86:	4b48      	ldr	r3, [pc, #288]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	4944      	ldr	r1, [pc, #272]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	493c      	ldr	r1, [pc, #240]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad8:	4933      	ldr	r1, [pc, #204]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aec:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afa:	492b      	ldr	r1, [pc, #172]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d011      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1c:	4922      	ldr	r1, [pc, #136]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	4912      	ldr	r1, [pc, #72]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b80:	4909      	ldr	r1, [pc, #36]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d006      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80d9 	beq.w	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a01      	ldr	r2, [pc, #4]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ba6:	e001      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bae:	f7fe fa97 	bl	80010e0 <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bb6:	f7fe fa93 	bl	80010e0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b64      	cmp	r3, #100	; 0x64
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e194      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d021      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11d      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002be8:	4b64      	ldr	r3, [pc, #400]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bf6:	4b61      	ldr	r3, [pc, #388]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	019a      	lsls	r2, r3, #6
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	071b      	lsls	r3, r3, #28
 8002c1c:	4957      	ldr	r1, [pc, #348]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d02e      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4e:	d129      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c64:	0f1b      	lsrs	r3, r3, #28
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	019a      	lsls	r2, r3, #6
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	071b      	lsls	r3, r3, #28
 8002c84:	493d      	ldr	r1, [pc, #244]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c92:	f023 021f 	bic.w	r2, r3, #31
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	4937      	ldr	r1, [pc, #220]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01d      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb6:	0e1b      	lsrs	r3, r3, #24
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc4:	0f1b      	lsrs	r3, r3, #28
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	019a      	lsls	r2, r3, #6
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	071b      	lsls	r3, r3, #28
 8002ce4:	4925      	ldr	r1, [pc, #148]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d011      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	019a      	lsls	r2, r3, #6
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	071b      	lsls	r3, r3, #28
 8002d14:	4919      	ldr	r1, [pc, #100]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fe f9da 	bl	80010e0 <HAL_GetTick>
 8002d2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d30:	f7fe f9d6 	bl	80010e0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0d7      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 80cd 	bne.w	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d62:	f7fe f9bd 	bl	80010e0 <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d6a:	f7fe f9b9 	bl	80010e0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	; 0x64
 8002d76:	d903      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0ba      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d80:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8c:	d0ed      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02e      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d12a      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002db6:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	0f1b      	lsrs	r3, r3, #28
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	019a      	lsls	r2, r3, #6
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	061b      	lsls	r3, r3, #24
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	4944      	ldr	r1, [pc, #272]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002df2:	4b42      	ldr	r3, [pc, #264]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	493d      	ldr	r1, [pc, #244]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d022      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e20:	d11d      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	0e1b      	lsrs	r3, r3, #24
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	0f1b      	lsrs	r3, r3, #28
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	019a      	lsls	r2, r3, #6
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	4929      	ldr	r1, [pc, #164]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d028      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	0e1b      	lsrs	r3, r3, #24
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e78:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	019a      	lsls	r2, r3, #6
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	431a      	orrs	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	071b      	lsls	r3, r3, #28
 8002e9e:	4917      	ldr	r1, [pc, #92]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	4911      	ldr	r1, [pc, #68]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe f90a 	bl	80010e0 <HAL_GetTick>
 8002ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ed0:	f7fe f906 	bl	80010e0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e007      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eee:	d1ef      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800

08002f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e040      	b.n	8002f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd ff74 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fc66 	bl	8003810 <UART_SetConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e022      	b.n	8002f94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 febe 	bl	8003cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 ff45 	bl	8003e1c <UART_CheckIdleState>
 8002f92:	4603      	mov	r3, r0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d171      	bne.n	8003098 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Transmit+0x24>
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e06a      	b.n	800309a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2221      	movs	r2, #33	; 0x21
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd2:	f7fe f885 	bl	80010e0 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff0:	d108      	bne.n	8003004 <HAL_UART_Transmit+0x68>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d104      	bne.n	8003004 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	e003      	b.n	800300c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800300c:	e02c      	b.n	8003068 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 ff36 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e038      	b.n	800309a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3302      	adds	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e007      	b.n	8003056 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3301      	adds	r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1cc      	bne.n	800300e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2200      	movs	r2, #0
 800307c:	2140      	movs	r1, #64	; 0x40
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 ff03 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e005      	b.n	800309a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b08a      	sub	sp, #40	; 0x28
 80030a6:	af02      	add	r7, sp, #8
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	f040 80b1 	bne.w	8003220 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_UART_Receive+0x28>
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0a9      	b.n	8003222 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2222      	movs	r2, #34	; 0x22
 80030da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e4:	f7fd fffc 	bl	80010e0 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d10e      	bne.n	8003122 <HAL_UART_Receive+0x80>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_UART_Receive+0x76>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003112:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003116:	e02d      	b.n	8003174 <HAL_UART_Receive+0xd2>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	22ff      	movs	r2, #255	; 0xff
 800311c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003120:	e028      	b.n	8003174 <HAL_UART_Receive+0xd2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_UART_Receive+0xa4>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d104      	bne.n	800313c <HAL_UART_Receive+0x9a>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800313a:	e01b      	b.n	8003174 <HAL_UART_Receive+0xd2>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	227f      	movs	r2, #127	; 0x7f
 8003140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003144:	e016      	b.n	8003174 <HAL_UART_Receive+0xd2>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800314e:	d10d      	bne.n	800316c <HAL_UART_Receive+0xca>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_UART_Receive+0xc0>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	227f      	movs	r2, #127	; 0x7f
 800315c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003160:	e008      	b.n	8003174 <HAL_UART_Receive+0xd2>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	223f      	movs	r2, #63	; 0x3f
 8003166:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800316a:	e003      	b.n	8003174 <HAL_UART_Receive+0xd2>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800317a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d108      	bne.n	8003198 <HAL_UART_Receive+0xf6>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e003      	b.n	80031a0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031a0:	e032      	b.n	8003208 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2120      	movs	r1, #32
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fe6c 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e032      	b.n	8003222 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	8a7b      	ldrh	r3, [r7, #18]
 80031cc:	4013      	ands	r3, r2
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	3302      	adds	r3, #2
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	e00c      	b.n	80031f6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	8a7b      	ldrh	r3, [r7, #18]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4013      	ands	r3, r2
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3301      	adds	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1c6      	bne.n	80031a2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b0ba      	sub	sp, #232	; 0xe8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003256:	f640 030f 	movw	r3, #2063	; 0x80f
 800325a:	4013      	ands	r3, r2
 800325c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d115      	bne.n	8003294 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00f      	beq.n	8003294 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8297 	beq.w	80037b8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
      }
      return;
 8003292:	e291      	b.n	80037b8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8117 	beq.w	80034cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032ae:	4b85      	ldr	r3, [pc, #532]	; (80034c4 <HAL_UART_IRQHandler+0x298>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 810a 	beq.w	80034cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d011      	beq.n	80032e8 <HAL_UART_IRQHandler+0xbc>
 80032c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d011      	beq.n	8003318 <HAL_UART_IRQHandler+0xec>
 80032f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2202      	movs	r2, #2
 8003306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d011      	beq.n	8003348 <HAL_UART_IRQHandler+0x11c>
 8003324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2204      	movs	r2, #4
 8003336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333e:	f043 0202 	orr.w	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d017      	beq.n	8003384 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003364:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2208      	movs	r2, #8
 8003372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337a:	f043 0208 	orr.w	r2, r3, #8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <HAL_UART_IRQHandler+0x18a>
 8003390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 81fd 	beq.w	80037bc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003406:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	d04f      	beq.n	80034ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fe01 	bl	8004016 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d141      	bne.n	80034a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3308      	adds	r3, #8
 8003428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800343c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800344e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800345a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1d9      	bne.n	8003422 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	2b00      	cmp	r3, #0
 8003474:	d013      	beq.n	800349e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <HAL_UART_IRQHandler+0x29c>)
 800347c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe f868 	bl	8001558 <HAL_DMA_Abort_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003498:	4610      	mov	r0, r2
 800349a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349c:	e00f      	b.n	80034be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9a0 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a4:	e00b      	b.n	80034be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f99c 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	e007      	b.n	80034be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f998 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80034bc:	e17e      	b.n	80037bc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034be:	bf00      	nop
    return;
 80034c0:	e17c      	b.n	80037bc <HAL_UART_IRQHandler+0x590>
 80034c2:	bf00      	nop
 80034c4:	04000120 	.word	0x04000120
 80034c8:	080040df 	.word	0x080040df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f040 814c 	bne.w	800376e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8145 	beq.w	800376e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 813e 	beq.w	800376e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2210      	movs	r2, #16
 80034f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	f040 80b6 	bne.w	8003676 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003516:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8150 	beq.w	80037c0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800352a:	429a      	cmp	r2, r3
 800352c:	f080 8148 	bcs.w	80037c0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003544:	f000 8086 	beq.w	8003654 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800355c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003576:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800357e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800358a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1da      	bne.n	8003548 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3308      	adds	r3, #8
 8003598:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3308      	adds	r3, #8
 80035b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e1      	bne.n	8003592 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3308      	adds	r3, #8
 80035ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e3      	bne.n	80035ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003624:	f023 0310 	bic.w	r3, r3, #16
 8003628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003636:	65bb      	str	r3, [r7, #88]	; 0x58
 8003638:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800363c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e4      	bne.n	8003614 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd ff12 	bl	8001478 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003666:	b29b      	uxth	r3, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	b29b      	uxth	r3, r3
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8c2 	bl	80037f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003674:	e0a4      	b.n	80037c0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003682:	b29b      	uxth	r3, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8096 	beq.w	80037c4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8091 	beq.w	80037c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
 80036c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e4      	bne.n	80036a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3308      	adds	r3, #8
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	623b      	str	r3, [r7, #32]
   return(result);
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3308      	adds	r3, #8
 80036f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036fc:	633a      	str	r2, [r7, #48]	; 0x30
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e3      	bne.n	80036d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	60fb      	str	r3, [r7, #12]
   return(result);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0310 	bic.w	r3, r3, #16
 8003738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	69b9      	ldr	r1, [r7, #24]
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	617b      	str	r3, [r7, #20]
   return(result);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e4      	bne.n	8003724 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f846 	bl	80037f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800376c:	e02a      	b.n	80037c4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00e      	beq.n	8003798 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01c      	beq.n	80037c8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
    }
    return;
 8003796:	e017      	b.n	80037c8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d012      	beq.n	80037ca <HAL_UART_IRQHandler+0x59e>
 80037a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fcaa 	bl	800410a <UART_EndTransmit_IT>
    return;
 80037b6:	e008      	b.n	80037ca <HAL_UART_IRQHandler+0x59e>
      return;
 80037b8:	bf00      	nop
 80037ba:	e006      	b.n	80037ca <HAL_UART_IRQHandler+0x59e>
    return;
 80037bc:	bf00      	nop
 80037be:	e004      	b.n	80037ca <HAL_UART_IRQHandler+0x59e>
      return;
 80037c0:	bf00      	nop
 80037c2:	e002      	b.n	80037ca <HAL_UART_IRQHandler+0x59e>
      return;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <HAL_UART_IRQHandler+0x59e>
    return;
 80037c8:	bf00      	nop
  }

}
 80037ca:	37e8      	adds	r7, #232	; 0xe8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4ba6      	ldr	r3, [pc, #664]	; (8003ad4 <UART_SetConfig+0x2c4>)
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	430b      	orrs	r3, r1
 8003846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a94      	ldr	r2, [pc, #592]	; (8003ad8 <UART_SetConfig+0x2c8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d120      	bne.n	80038ce <UART_SetConfig+0xbe>
 800388c:	4b93      	ldr	r3, [pc, #588]	; (8003adc <UART_SetConfig+0x2cc>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b03      	cmp	r3, #3
 8003898:	d816      	bhi.n	80038c8 <UART_SetConfig+0xb8>
 800389a:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0x90>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	080038b1 	.word	0x080038b1
 80038a4:	080038bd 	.word	0x080038bd
 80038a8:	080038b7 	.word	0x080038b7
 80038ac:	080038c3 	.word	0x080038c3
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e150      	b.n	8003b58 <UART_SetConfig+0x348>
 80038b6:	2302      	movs	r3, #2
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e14d      	b.n	8003b58 <UART_SetConfig+0x348>
 80038bc:	2304      	movs	r3, #4
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e14a      	b.n	8003b58 <UART_SetConfig+0x348>
 80038c2:	2308      	movs	r3, #8
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e147      	b.n	8003b58 <UART_SetConfig+0x348>
 80038c8:	2310      	movs	r3, #16
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e144      	b.n	8003b58 <UART_SetConfig+0x348>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a83      	ldr	r2, [pc, #524]	; (8003ae0 <UART_SetConfig+0x2d0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d132      	bne.n	800393e <UART_SetConfig+0x12e>
 80038d8:	4b80      	ldr	r3, [pc, #512]	; (8003adc <UART_SetConfig+0x2cc>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d828      	bhi.n	8003938 <UART_SetConfig+0x128>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <UART_SetConfig+0xdc>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	08003921 	.word	0x08003921
 80038f0:	08003939 	.word	0x08003939
 80038f4:	08003939 	.word	0x08003939
 80038f8:	08003939 	.word	0x08003939
 80038fc:	0800392d 	.word	0x0800392d
 8003900:	08003939 	.word	0x08003939
 8003904:	08003939 	.word	0x08003939
 8003908:	08003939 	.word	0x08003939
 800390c:	08003927 	.word	0x08003927
 8003910:	08003939 	.word	0x08003939
 8003914:	08003939 	.word	0x08003939
 8003918:	08003939 	.word	0x08003939
 800391c:	08003933 	.word	0x08003933
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e118      	b.n	8003b58 <UART_SetConfig+0x348>
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e115      	b.n	8003b58 <UART_SetConfig+0x348>
 800392c:	2304      	movs	r3, #4
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e112      	b.n	8003b58 <UART_SetConfig+0x348>
 8003932:	2308      	movs	r3, #8
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e10f      	b.n	8003b58 <UART_SetConfig+0x348>
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e10c      	b.n	8003b58 <UART_SetConfig+0x348>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a68      	ldr	r2, [pc, #416]	; (8003ae4 <UART_SetConfig+0x2d4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d120      	bne.n	800398a <UART_SetConfig+0x17a>
 8003948:	4b64      	ldr	r3, [pc, #400]	; (8003adc <UART_SetConfig+0x2cc>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003952:	2b30      	cmp	r3, #48	; 0x30
 8003954:	d013      	beq.n	800397e <UART_SetConfig+0x16e>
 8003956:	2b30      	cmp	r3, #48	; 0x30
 8003958:	d814      	bhi.n	8003984 <UART_SetConfig+0x174>
 800395a:	2b20      	cmp	r3, #32
 800395c:	d009      	beq.n	8003972 <UART_SetConfig+0x162>
 800395e:	2b20      	cmp	r3, #32
 8003960:	d810      	bhi.n	8003984 <UART_SetConfig+0x174>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <UART_SetConfig+0x15c>
 8003966:	2b10      	cmp	r3, #16
 8003968:	d006      	beq.n	8003978 <UART_SetConfig+0x168>
 800396a:	e00b      	b.n	8003984 <UART_SetConfig+0x174>
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e0f2      	b.n	8003b58 <UART_SetConfig+0x348>
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e0ef      	b.n	8003b58 <UART_SetConfig+0x348>
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e0ec      	b.n	8003b58 <UART_SetConfig+0x348>
 800397e:	2308      	movs	r3, #8
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e0e9      	b.n	8003b58 <UART_SetConfig+0x348>
 8003984:	2310      	movs	r3, #16
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e0e6      	b.n	8003b58 <UART_SetConfig+0x348>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a56      	ldr	r2, [pc, #344]	; (8003ae8 <UART_SetConfig+0x2d8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d120      	bne.n	80039d6 <UART_SetConfig+0x1c6>
 8003994:	4b51      	ldr	r3, [pc, #324]	; (8003adc <UART_SetConfig+0x2cc>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800399e:	2bc0      	cmp	r3, #192	; 0xc0
 80039a0:	d013      	beq.n	80039ca <UART_SetConfig+0x1ba>
 80039a2:	2bc0      	cmp	r3, #192	; 0xc0
 80039a4:	d814      	bhi.n	80039d0 <UART_SetConfig+0x1c0>
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d009      	beq.n	80039be <UART_SetConfig+0x1ae>
 80039aa:	2b80      	cmp	r3, #128	; 0x80
 80039ac:	d810      	bhi.n	80039d0 <UART_SetConfig+0x1c0>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <UART_SetConfig+0x1a8>
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d006      	beq.n	80039c4 <UART_SetConfig+0x1b4>
 80039b6:	e00b      	b.n	80039d0 <UART_SetConfig+0x1c0>
 80039b8:	2300      	movs	r3, #0
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e0cc      	b.n	8003b58 <UART_SetConfig+0x348>
 80039be:	2302      	movs	r3, #2
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e0c9      	b.n	8003b58 <UART_SetConfig+0x348>
 80039c4:	2304      	movs	r3, #4
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e0c6      	b.n	8003b58 <UART_SetConfig+0x348>
 80039ca:	2308      	movs	r3, #8
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e0c3      	b.n	8003b58 <UART_SetConfig+0x348>
 80039d0:	2310      	movs	r3, #16
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e0c0      	b.n	8003b58 <UART_SetConfig+0x348>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a44      	ldr	r2, [pc, #272]	; (8003aec <UART_SetConfig+0x2dc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d125      	bne.n	8003a2c <UART_SetConfig+0x21c>
 80039e0:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <UART_SetConfig+0x2cc>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ee:	d017      	beq.n	8003a20 <UART_SetConfig+0x210>
 80039f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f4:	d817      	bhi.n	8003a26 <UART_SetConfig+0x216>
 80039f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fa:	d00b      	beq.n	8003a14 <UART_SetConfig+0x204>
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	d811      	bhi.n	8003a26 <UART_SetConfig+0x216>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <UART_SetConfig+0x1fe>
 8003a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0a:	d006      	beq.n	8003a1a <UART_SetConfig+0x20a>
 8003a0c:	e00b      	b.n	8003a26 <UART_SetConfig+0x216>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e0a1      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a14:	2302      	movs	r3, #2
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e09e      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e09b      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a20:	2308      	movs	r3, #8
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e098      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a26:	2310      	movs	r3, #16
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e095      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <UART_SetConfig+0x2e0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d125      	bne.n	8003a82 <UART_SetConfig+0x272>
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <UART_SetConfig+0x2cc>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a44:	d017      	beq.n	8003a76 <UART_SetConfig+0x266>
 8003a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a4a:	d817      	bhi.n	8003a7c <UART_SetConfig+0x26c>
 8003a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a50:	d00b      	beq.n	8003a6a <UART_SetConfig+0x25a>
 8003a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a56:	d811      	bhi.n	8003a7c <UART_SetConfig+0x26c>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <UART_SetConfig+0x254>
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d006      	beq.n	8003a70 <UART_SetConfig+0x260>
 8003a62:	e00b      	b.n	8003a7c <UART_SetConfig+0x26c>
 8003a64:	2301      	movs	r3, #1
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e076      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e073      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a70:	2304      	movs	r3, #4
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e070      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a76:	2308      	movs	r3, #8
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e06d      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e06a      	b.n	8003b58 <UART_SetConfig+0x348>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <UART_SetConfig+0x2e4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d138      	bne.n	8003afe <UART_SetConfig+0x2ee>
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <UART_SetConfig+0x2cc>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a9a:	d017      	beq.n	8003acc <UART_SetConfig+0x2bc>
 8003a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aa0:	d82a      	bhi.n	8003af8 <UART_SetConfig+0x2e8>
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d00b      	beq.n	8003ac0 <UART_SetConfig+0x2b0>
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aac:	d824      	bhi.n	8003af8 <UART_SetConfig+0x2e8>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <UART_SetConfig+0x2aa>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab6:	d006      	beq.n	8003ac6 <UART_SetConfig+0x2b6>
 8003ab8:	e01e      	b.n	8003af8 <UART_SetConfig+0x2e8>
 8003aba:	2300      	movs	r3, #0
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e04b      	b.n	8003b58 <UART_SetConfig+0x348>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e048      	b.n	8003b58 <UART_SetConfig+0x348>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e045      	b.n	8003b58 <UART_SetConfig+0x348>
 8003acc:	2308      	movs	r3, #8
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e042      	b.n	8003b58 <UART_SetConfig+0x348>
 8003ad2:	bf00      	nop
 8003ad4:	efff69f3 	.word	0xefff69f3
 8003ad8:	40011000 	.word	0x40011000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40004400 	.word	0x40004400
 8003ae4:	40004800 	.word	0x40004800
 8003ae8:	40004c00 	.word	0x40004c00
 8003aec:	40005000 	.word	0x40005000
 8003af0:	40011400 	.word	0x40011400
 8003af4:	40007800 	.word	0x40007800
 8003af8:	2310      	movs	r3, #16
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e02c      	b.n	8003b58 <UART_SetConfig+0x348>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a72      	ldr	r2, [pc, #456]	; (8003ccc <UART_SetConfig+0x4bc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d125      	bne.n	8003b54 <UART_SetConfig+0x344>
 8003b08:	4b71      	ldr	r3, [pc, #452]	; (8003cd0 <UART_SetConfig+0x4c0>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b16:	d017      	beq.n	8003b48 <UART_SetConfig+0x338>
 8003b18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b1c:	d817      	bhi.n	8003b4e <UART_SetConfig+0x33e>
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d00b      	beq.n	8003b3c <UART_SetConfig+0x32c>
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b28:	d811      	bhi.n	8003b4e <UART_SetConfig+0x33e>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <UART_SetConfig+0x326>
 8003b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b32:	d006      	beq.n	8003b42 <UART_SetConfig+0x332>
 8003b34:	e00b      	b.n	8003b4e <UART_SetConfig+0x33e>
 8003b36:	2300      	movs	r3, #0
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e00d      	b.n	8003b58 <UART_SetConfig+0x348>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e00a      	b.n	8003b58 <UART_SetConfig+0x348>
 8003b42:	2304      	movs	r3, #4
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e007      	b.n	8003b58 <UART_SetConfig+0x348>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e004      	b.n	8003b58 <UART_SetConfig+0x348>
 8003b4e:	2310      	movs	r3, #16
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e001      	b.n	8003b58 <UART_SetConfig+0x348>
 8003b54:	2310      	movs	r3, #16
 8003b56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	d15b      	bne.n	8003c1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d828      	bhi.n	8003bba <UART_SetConfig+0x3aa>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <UART_SetConfig+0x360>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003b9d 	.word	0x08003b9d
 8003b78:	08003ba5 	.word	0x08003ba5
 8003b7c:	08003bbb 	.word	0x08003bbb
 8003b80:	08003bab 	.word	0x08003bab
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bbb 	.word	0x08003bbb
 8003b8c:	08003bbb 	.word	0x08003bbb
 8003b90:	08003bb3 	.word	0x08003bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fe fd9c 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003b98:	61b8      	str	r0, [r7, #24]
        break;
 8003b9a:	e013      	b.n	8003bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7fe fdac 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8003ba0:	61b8      	str	r0, [r7, #24]
        break;
 8003ba2:	e00f      	b.n	8003bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <UART_SetConfig+0x4c4>)
 8003ba6:	61bb      	str	r3, [r7, #24]
        break;
 8003ba8:	e00c      	b.n	8003bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003baa:	f7fe fcbf 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003bae:	61b8      	str	r0, [r7, #24]
        break;
 8003bb0:	e008      	b.n	8003bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb6:	61bb      	str	r3, [r7, #24]
        break;
 8003bb8:	e004      	b.n	8003bc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003bc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d074      	beq.n	8003cb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	005a      	lsls	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	441a      	add	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b0f      	cmp	r3, #15
 8003be4:	d916      	bls.n	8003c14 <UART_SetConfig+0x404>
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d212      	bcs.n	8003c14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f023 030f 	bic.w	r3, r3, #15
 8003bf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	89fa      	ldrh	r2, [r7, #14]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	e04f      	b.n	8003cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77bb      	strb	r3, [r7, #30]
 8003c18:	e04c      	b.n	8003cb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d828      	bhi.n	8003c72 <UART_SetConfig+0x462>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <UART_SetConfig+0x418>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c73 	.word	0x08003c73
 8003c38:	08003c63 	.word	0x08003c63
 8003c3c:	08003c73 	.word	0x08003c73
 8003c40:	08003c73 	.word	0x08003c73
 8003c44:	08003c73 	.word	0x08003c73
 8003c48:	08003c6b 	.word	0x08003c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe fd40 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8003c50:	61b8      	str	r0, [r7, #24]
        break;
 8003c52:	e013      	b.n	8003c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c54:	f7fe fd50 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8003c58:	61b8      	str	r0, [r7, #24]
        break;
 8003c5a:	e00f      	b.n	8003c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <UART_SetConfig+0x4c4>)
 8003c5e:	61bb      	str	r3, [r7, #24]
        break;
 8003c60:	e00c      	b.n	8003c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c62:	f7fe fc63 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003c66:	61b8      	str	r0, [r7, #24]
        break;
 8003c68:	e008      	b.n	8003c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e004      	b.n	8003c7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	77bb      	strb	r3, [r7, #30]
        break;
 8003c7a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d018      	beq.n	8003cb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	085a      	lsrs	r2, r3, #1
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	441a      	add	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	d909      	bls.n	8003cb0 <UART_SetConfig+0x4a0>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca2:	d205      	bcs.n	8003cb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	e001      	b.n	8003cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40007c00 	.word	0x40007c00
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00f42400 	.word	0x00f42400

08003cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01a      	beq.n	8003dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd6:	d10a      	bne.n	8003dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e2c:	f7fd f958 	bl	80010e0 <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d10e      	bne.n	8003e5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f81b 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e011      	b.n	8003e82 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b09c      	sub	sp, #112	; 0x70
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	e0a7      	b.n	8003fec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	f000 80a3 	beq.w	8003fec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fd f91b 	bl	80010e0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x32>
 8003eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d13f      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003edc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e6      	bne.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	663b      	str	r3, [r7, #96]	; 0x60
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e068      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d050      	beq.n	8003fec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f58:	d148      	bne.n	8003fec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
 8003f84:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e6      	bne.n	8003f64 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fb6:	623a      	str	r2, [r7, #32]
 8003fb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	69f9      	ldr	r1, [r7, #28]
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e010      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	429a      	cmp	r2, r3
 8004008:	f43f af48 	beq.w	8003e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3770      	adds	r7, #112	; 0x70
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004016:	b480      	push	{r7}
 8004018:	b095      	sub	sp, #84	; 0x54
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
 800403e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004088:	2b01      	cmp	r3, #1
 800408a:	d118      	bne.n	80040be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	60bb      	str	r3, [r7, #8]
   return(result);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f023 0310 	bic.w	r3, r3, #16
 80040a0:	647b      	str	r3, [r7, #68]	; 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6979      	ldr	r1, [r7, #20]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	613b      	str	r3, [r7, #16]
   return(result);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e6      	bne.n	800408c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040d2:	bf00      	nop
 80040d4:	3754      	adds	r7, #84	; 0x54
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fb71 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b088      	sub	sp, #32
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fb3d 	bl	80037d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004156:	bf00      	nop
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <__errno>:
 8004160:	4b01      	ldr	r3, [pc, #4]	; (8004168 <__errno+0x8>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	200000a8 	.word	0x200000a8

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	4d0d      	ldr	r5, [pc, #52]	; (80041a4 <__libc_init_array+0x38>)
 8004170:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004172:	1b64      	subs	r4, r4, r5
 8004174:	10a4      	asrs	r4, r4, #2
 8004176:	2600      	movs	r6, #0
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	4d0b      	ldr	r5, [pc, #44]	; (80041ac <__libc_init_array+0x40>)
 800417e:	4c0c      	ldr	r4, [pc, #48]	; (80041b0 <__libc_init_array+0x44>)
 8004180:	f000 fc8e 	bl	8004aa0 <_init>
 8004184:	1b64      	subs	r4, r4, r5
 8004186:	10a4      	asrs	r4, r4, #2
 8004188:	2600      	movs	r6, #0
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	08004c58 	.word	0x08004c58
 80041a8:	08004c58 	.word	0x08004c58
 80041ac:	08004c58 	.word	0x08004c58
 80041b0:	08004c5c 	.word	0x08004c5c

080041b4 <memset>:
 80041b4:	4402      	add	r2, r0
 80041b6:	4603      	mov	r3, r0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d100      	bne.n	80041be <memset+0xa>
 80041bc:	4770      	bx	lr
 80041be:	f803 1b01 	strb.w	r1, [r3], #1
 80041c2:	e7f9      	b.n	80041b8 <memset+0x4>

080041c4 <siprintf>:
 80041c4:	b40e      	push	{r1, r2, r3}
 80041c6:	b500      	push	{lr}
 80041c8:	b09c      	sub	sp, #112	; 0x70
 80041ca:	ab1d      	add	r3, sp, #116	; 0x74
 80041cc:	9002      	str	r0, [sp, #8]
 80041ce:	9006      	str	r0, [sp, #24]
 80041d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041d4:	4809      	ldr	r0, [pc, #36]	; (80041fc <siprintf+0x38>)
 80041d6:	9107      	str	r1, [sp, #28]
 80041d8:	9104      	str	r1, [sp, #16]
 80041da:	4909      	ldr	r1, [pc, #36]	; (8004200 <siprintf+0x3c>)
 80041dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80041e0:	9105      	str	r1, [sp, #20]
 80041e2:	6800      	ldr	r0, [r0, #0]
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	a902      	add	r1, sp, #8
 80041e8:	f000 f868 	bl	80042bc <_svfiprintf_r>
 80041ec:	9b02      	ldr	r3, [sp, #8]
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	b01c      	add	sp, #112	; 0x70
 80041f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f8:	b003      	add	sp, #12
 80041fa:	4770      	bx	lr
 80041fc:	200000a8 	.word	0x200000a8
 8004200:	ffff0208 	.word	0xffff0208

08004204 <__ssputs_r>:
 8004204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	688e      	ldr	r6, [r1, #8]
 800420a:	429e      	cmp	r6, r3
 800420c:	4682      	mov	sl, r0
 800420e:	460c      	mov	r4, r1
 8004210:	4690      	mov	r8, r2
 8004212:	461f      	mov	r7, r3
 8004214:	d838      	bhi.n	8004288 <__ssputs_r+0x84>
 8004216:	898a      	ldrh	r2, [r1, #12]
 8004218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800421c:	d032      	beq.n	8004284 <__ssputs_r+0x80>
 800421e:	6825      	ldr	r5, [r4, #0]
 8004220:	6909      	ldr	r1, [r1, #16]
 8004222:	eba5 0901 	sub.w	r9, r5, r1
 8004226:	6965      	ldr	r5, [r4, #20]
 8004228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800422c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004230:	3301      	adds	r3, #1
 8004232:	444b      	add	r3, r9
 8004234:	106d      	asrs	r5, r5, #1
 8004236:	429d      	cmp	r5, r3
 8004238:	bf38      	it	cc
 800423a:	461d      	movcc	r5, r3
 800423c:	0553      	lsls	r3, r2, #21
 800423e:	d531      	bpl.n	80042a4 <__ssputs_r+0xa0>
 8004240:	4629      	mov	r1, r5
 8004242:	f000 fb63 	bl	800490c <_malloc_r>
 8004246:	4606      	mov	r6, r0
 8004248:	b950      	cbnz	r0, 8004260 <__ssputs_r+0x5c>
 800424a:	230c      	movs	r3, #12
 800424c:	f8ca 3000 	str.w	r3, [sl]
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004256:	81a3      	strh	r3, [r4, #12]
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004260:	6921      	ldr	r1, [r4, #16]
 8004262:	464a      	mov	r2, r9
 8004264:	f000 fabe 	bl	80047e4 <memcpy>
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800426e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004272:	81a3      	strh	r3, [r4, #12]
 8004274:	6126      	str	r6, [r4, #16]
 8004276:	6165      	str	r5, [r4, #20]
 8004278:	444e      	add	r6, r9
 800427a:	eba5 0509 	sub.w	r5, r5, r9
 800427e:	6026      	str	r6, [r4, #0]
 8004280:	60a5      	str	r5, [r4, #8]
 8004282:	463e      	mov	r6, r7
 8004284:	42be      	cmp	r6, r7
 8004286:	d900      	bls.n	800428a <__ssputs_r+0x86>
 8004288:	463e      	mov	r6, r7
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	4632      	mov	r2, r6
 800428e:	4641      	mov	r1, r8
 8004290:	f000 fab6 	bl	8004800 <memmove>
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	1b9b      	subs	r3, r3, r6
 8004298:	60a3      	str	r3, [r4, #8]
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	4433      	add	r3, r6
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	2000      	movs	r0, #0
 80042a2:	e7db      	b.n	800425c <__ssputs_r+0x58>
 80042a4:	462a      	mov	r2, r5
 80042a6:	f000 fba5 	bl	80049f4 <_realloc_r>
 80042aa:	4606      	mov	r6, r0
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d1e1      	bne.n	8004274 <__ssputs_r+0x70>
 80042b0:	6921      	ldr	r1, [r4, #16]
 80042b2:	4650      	mov	r0, sl
 80042b4:	f000 fabe 	bl	8004834 <_free_r>
 80042b8:	e7c7      	b.n	800424a <__ssputs_r+0x46>
	...

080042bc <_svfiprintf_r>:
 80042bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c0:	4698      	mov	r8, r3
 80042c2:	898b      	ldrh	r3, [r1, #12]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	b09d      	sub	sp, #116	; 0x74
 80042c8:	4607      	mov	r7, r0
 80042ca:	460d      	mov	r5, r1
 80042cc:	4614      	mov	r4, r2
 80042ce:	d50e      	bpl.n	80042ee <_svfiprintf_r+0x32>
 80042d0:	690b      	ldr	r3, [r1, #16]
 80042d2:	b963      	cbnz	r3, 80042ee <_svfiprintf_r+0x32>
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	f000 fb19 	bl	800490c <_malloc_r>
 80042da:	6028      	str	r0, [r5, #0]
 80042dc:	6128      	str	r0, [r5, #16]
 80042de:	b920      	cbnz	r0, 80042ea <_svfiprintf_r+0x2e>
 80042e0:	230c      	movs	r3, #12
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295
 80042e8:	e0d1      	b.n	800448e <_svfiprintf_r+0x1d2>
 80042ea:	2340      	movs	r3, #64	; 0x40
 80042ec:	616b      	str	r3, [r5, #20]
 80042ee:	2300      	movs	r3, #0
 80042f0:	9309      	str	r3, [sp, #36]	; 0x24
 80042f2:	2320      	movs	r3, #32
 80042f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80042fc:	2330      	movs	r3, #48	; 0x30
 80042fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80044a8 <_svfiprintf_r+0x1ec>
 8004302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004306:	f04f 0901 	mov.w	r9, #1
 800430a:	4623      	mov	r3, r4
 800430c:	469a      	mov	sl, r3
 800430e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004312:	b10a      	cbz	r2, 8004318 <_svfiprintf_r+0x5c>
 8004314:	2a25      	cmp	r2, #37	; 0x25
 8004316:	d1f9      	bne.n	800430c <_svfiprintf_r+0x50>
 8004318:	ebba 0b04 	subs.w	fp, sl, r4
 800431c:	d00b      	beq.n	8004336 <_svfiprintf_r+0x7a>
 800431e:	465b      	mov	r3, fp
 8004320:	4622      	mov	r2, r4
 8004322:	4629      	mov	r1, r5
 8004324:	4638      	mov	r0, r7
 8004326:	f7ff ff6d 	bl	8004204 <__ssputs_r>
 800432a:	3001      	adds	r0, #1
 800432c:	f000 80aa 	beq.w	8004484 <_svfiprintf_r+0x1c8>
 8004330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004332:	445a      	add	r2, fp
 8004334:	9209      	str	r2, [sp, #36]	; 0x24
 8004336:	f89a 3000 	ldrb.w	r3, [sl]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80a2 	beq.w	8004484 <_svfiprintf_r+0x1c8>
 8004340:	2300      	movs	r3, #0
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800434a:	f10a 0a01 	add.w	sl, sl, #1
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	9307      	str	r3, [sp, #28]
 8004352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004356:	931a      	str	r3, [sp, #104]	; 0x68
 8004358:	4654      	mov	r4, sl
 800435a:	2205      	movs	r2, #5
 800435c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004360:	4851      	ldr	r0, [pc, #324]	; (80044a8 <_svfiprintf_r+0x1ec>)
 8004362:	f7fb ff6d 	bl	8000240 <memchr>
 8004366:	9a04      	ldr	r2, [sp, #16]
 8004368:	b9d8      	cbnz	r0, 80043a2 <_svfiprintf_r+0xe6>
 800436a:	06d0      	lsls	r0, r2, #27
 800436c:	bf44      	itt	mi
 800436e:	2320      	movmi	r3, #32
 8004370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004374:	0711      	lsls	r1, r2, #28
 8004376:	bf44      	itt	mi
 8004378:	232b      	movmi	r3, #43	; 0x2b
 800437a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800437e:	f89a 3000 	ldrb.w	r3, [sl]
 8004382:	2b2a      	cmp	r3, #42	; 0x2a
 8004384:	d015      	beq.n	80043b2 <_svfiprintf_r+0xf6>
 8004386:	9a07      	ldr	r2, [sp, #28]
 8004388:	4654      	mov	r4, sl
 800438a:	2000      	movs	r0, #0
 800438c:	f04f 0c0a 	mov.w	ip, #10
 8004390:	4621      	mov	r1, r4
 8004392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004396:	3b30      	subs	r3, #48	; 0x30
 8004398:	2b09      	cmp	r3, #9
 800439a:	d94e      	bls.n	800443a <_svfiprintf_r+0x17e>
 800439c:	b1b0      	cbz	r0, 80043cc <_svfiprintf_r+0x110>
 800439e:	9207      	str	r2, [sp, #28]
 80043a0:	e014      	b.n	80043cc <_svfiprintf_r+0x110>
 80043a2:	eba0 0308 	sub.w	r3, r0, r8
 80043a6:	fa09 f303 	lsl.w	r3, r9, r3
 80043aa:	4313      	orrs	r3, r2
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	46a2      	mov	sl, r4
 80043b0:	e7d2      	b.n	8004358 <_svfiprintf_r+0x9c>
 80043b2:	9b03      	ldr	r3, [sp, #12]
 80043b4:	1d19      	adds	r1, r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	9103      	str	r1, [sp, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfbb      	ittet	lt
 80043be:	425b      	neglt	r3, r3
 80043c0:	f042 0202 	orrlt.w	r2, r2, #2
 80043c4:	9307      	strge	r3, [sp, #28]
 80043c6:	9307      	strlt	r3, [sp, #28]
 80043c8:	bfb8      	it	lt
 80043ca:	9204      	strlt	r2, [sp, #16]
 80043cc:	7823      	ldrb	r3, [r4, #0]
 80043ce:	2b2e      	cmp	r3, #46	; 0x2e
 80043d0:	d10c      	bne.n	80043ec <_svfiprintf_r+0x130>
 80043d2:	7863      	ldrb	r3, [r4, #1]
 80043d4:	2b2a      	cmp	r3, #42	; 0x2a
 80043d6:	d135      	bne.n	8004444 <_svfiprintf_r+0x188>
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	1d1a      	adds	r2, r3, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	9203      	str	r2, [sp, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bfb8      	it	lt
 80043e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80043e8:	3402      	adds	r4, #2
 80043ea:	9305      	str	r3, [sp, #20]
 80043ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044b8 <_svfiprintf_r+0x1fc>
 80043f0:	7821      	ldrb	r1, [r4, #0]
 80043f2:	2203      	movs	r2, #3
 80043f4:	4650      	mov	r0, sl
 80043f6:	f7fb ff23 	bl	8000240 <memchr>
 80043fa:	b140      	cbz	r0, 800440e <_svfiprintf_r+0x152>
 80043fc:	2340      	movs	r3, #64	; 0x40
 80043fe:	eba0 000a 	sub.w	r0, r0, sl
 8004402:	fa03 f000 	lsl.w	r0, r3, r0
 8004406:	9b04      	ldr	r3, [sp, #16]
 8004408:	4303      	orrs	r3, r0
 800440a:	3401      	adds	r4, #1
 800440c:	9304      	str	r3, [sp, #16]
 800440e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004412:	4826      	ldr	r0, [pc, #152]	; (80044ac <_svfiprintf_r+0x1f0>)
 8004414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004418:	2206      	movs	r2, #6
 800441a:	f7fb ff11 	bl	8000240 <memchr>
 800441e:	2800      	cmp	r0, #0
 8004420:	d038      	beq.n	8004494 <_svfiprintf_r+0x1d8>
 8004422:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <_svfiprintf_r+0x1f4>)
 8004424:	bb1b      	cbnz	r3, 800446e <_svfiprintf_r+0x1b2>
 8004426:	9b03      	ldr	r3, [sp, #12]
 8004428:	3307      	adds	r3, #7
 800442a:	f023 0307 	bic.w	r3, r3, #7
 800442e:	3308      	adds	r3, #8
 8004430:	9303      	str	r3, [sp, #12]
 8004432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004434:	4433      	add	r3, r6
 8004436:	9309      	str	r3, [sp, #36]	; 0x24
 8004438:	e767      	b.n	800430a <_svfiprintf_r+0x4e>
 800443a:	fb0c 3202 	mla	r2, ip, r2, r3
 800443e:	460c      	mov	r4, r1
 8004440:	2001      	movs	r0, #1
 8004442:	e7a5      	b.n	8004390 <_svfiprintf_r+0xd4>
 8004444:	2300      	movs	r3, #0
 8004446:	3401      	adds	r4, #1
 8004448:	9305      	str	r3, [sp, #20]
 800444a:	4619      	mov	r1, r3
 800444c:	f04f 0c0a 	mov.w	ip, #10
 8004450:	4620      	mov	r0, r4
 8004452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004456:	3a30      	subs	r2, #48	; 0x30
 8004458:	2a09      	cmp	r2, #9
 800445a:	d903      	bls.n	8004464 <_svfiprintf_r+0x1a8>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0c5      	beq.n	80043ec <_svfiprintf_r+0x130>
 8004460:	9105      	str	r1, [sp, #20]
 8004462:	e7c3      	b.n	80043ec <_svfiprintf_r+0x130>
 8004464:	fb0c 2101 	mla	r1, ip, r1, r2
 8004468:	4604      	mov	r4, r0
 800446a:	2301      	movs	r3, #1
 800446c:	e7f0      	b.n	8004450 <_svfiprintf_r+0x194>
 800446e:	ab03      	add	r3, sp, #12
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	462a      	mov	r2, r5
 8004474:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <_svfiprintf_r+0x1f8>)
 8004476:	a904      	add	r1, sp, #16
 8004478:	4638      	mov	r0, r7
 800447a:	f3af 8000 	nop.w
 800447e:	1c42      	adds	r2, r0, #1
 8004480:	4606      	mov	r6, r0
 8004482:	d1d6      	bne.n	8004432 <_svfiprintf_r+0x176>
 8004484:	89ab      	ldrh	r3, [r5, #12]
 8004486:	065b      	lsls	r3, r3, #25
 8004488:	f53f af2c 	bmi.w	80042e4 <_svfiprintf_r+0x28>
 800448c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800448e:	b01d      	add	sp, #116	; 0x74
 8004490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004494:	ab03      	add	r3, sp, #12
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	462a      	mov	r2, r5
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <_svfiprintf_r+0x1f8>)
 800449c:	a904      	add	r1, sp, #16
 800449e:	4638      	mov	r0, r7
 80044a0:	f000 f87a 	bl	8004598 <_printf_i>
 80044a4:	e7eb      	b.n	800447e <_svfiprintf_r+0x1c2>
 80044a6:	bf00      	nop
 80044a8:	08004c1c 	.word	0x08004c1c
 80044ac:	08004c26 	.word	0x08004c26
 80044b0:	00000000 	.word	0x00000000
 80044b4:	08004205 	.word	0x08004205
 80044b8:	08004c22 	.word	0x08004c22

080044bc <_printf_common>:
 80044bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c0:	4616      	mov	r6, r2
 80044c2:	4699      	mov	r9, r3
 80044c4:	688a      	ldr	r2, [r1, #8]
 80044c6:	690b      	ldr	r3, [r1, #16]
 80044c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bfb8      	it	lt
 80044d0:	4613      	movlt	r3, r2
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044d8:	4607      	mov	r7, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	b10a      	cbz	r2, 80044e2 <_printf_common+0x26>
 80044de:	3301      	adds	r3, #1
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	0699      	lsls	r1, r3, #26
 80044e6:	bf42      	ittt	mi
 80044e8:	6833      	ldrmi	r3, [r6, #0]
 80044ea:	3302      	addmi	r3, #2
 80044ec:	6033      	strmi	r3, [r6, #0]
 80044ee:	6825      	ldr	r5, [r4, #0]
 80044f0:	f015 0506 	ands.w	r5, r5, #6
 80044f4:	d106      	bne.n	8004504 <_printf_common+0x48>
 80044f6:	f104 0a19 	add.w	sl, r4, #25
 80044fa:	68e3      	ldr	r3, [r4, #12]
 80044fc:	6832      	ldr	r2, [r6, #0]
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	42ab      	cmp	r3, r5
 8004502:	dc26      	bgt.n	8004552 <_printf_common+0x96>
 8004504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004508:	1e13      	subs	r3, r2, #0
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	bf18      	it	ne
 800450e:	2301      	movne	r3, #1
 8004510:	0692      	lsls	r2, r2, #26
 8004512:	d42b      	bmi.n	800456c <_printf_common+0xb0>
 8004514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004518:	4649      	mov	r1, r9
 800451a:	4638      	mov	r0, r7
 800451c:	47c0      	blx	r8
 800451e:	3001      	adds	r0, #1
 8004520:	d01e      	beq.n	8004560 <_printf_common+0xa4>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	68e5      	ldr	r5, [r4, #12]
 8004526:	6832      	ldr	r2, [r6, #0]
 8004528:	f003 0306 	and.w	r3, r3, #6
 800452c:	2b04      	cmp	r3, #4
 800452e:	bf08      	it	eq
 8004530:	1aad      	subeq	r5, r5, r2
 8004532:	68a3      	ldr	r3, [r4, #8]
 8004534:	6922      	ldr	r2, [r4, #16]
 8004536:	bf0c      	ite	eq
 8004538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800453c:	2500      	movne	r5, #0
 800453e:	4293      	cmp	r3, r2
 8004540:	bfc4      	itt	gt
 8004542:	1a9b      	subgt	r3, r3, r2
 8004544:	18ed      	addgt	r5, r5, r3
 8004546:	2600      	movs	r6, #0
 8004548:	341a      	adds	r4, #26
 800454a:	42b5      	cmp	r5, r6
 800454c:	d11a      	bne.n	8004584 <_printf_common+0xc8>
 800454e:	2000      	movs	r0, #0
 8004550:	e008      	b.n	8004564 <_printf_common+0xa8>
 8004552:	2301      	movs	r3, #1
 8004554:	4652      	mov	r2, sl
 8004556:	4649      	mov	r1, r9
 8004558:	4638      	mov	r0, r7
 800455a:	47c0      	blx	r8
 800455c:	3001      	adds	r0, #1
 800455e:	d103      	bne.n	8004568 <_printf_common+0xac>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	3501      	adds	r5, #1
 800456a:	e7c6      	b.n	80044fa <_printf_common+0x3e>
 800456c:	18e1      	adds	r1, r4, r3
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	2030      	movs	r0, #48	; 0x30
 8004572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004576:	4422      	add	r2, r4
 8004578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800457c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004580:	3302      	adds	r3, #2
 8004582:	e7c7      	b.n	8004514 <_printf_common+0x58>
 8004584:	2301      	movs	r3, #1
 8004586:	4622      	mov	r2, r4
 8004588:	4649      	mov	r1, r9
 800458a:	4638      	mov	r0, r7
 800458c:	47c0      	blx	r8
 800458e:	3001      	adds	r0, #1
 8004590:	d0e6      	beq.n	8004560 <_printf_common+0xa4>
 8004592:	3601      	adds	r6, #1
 8004594:	e7d9      	b.n	800454a <_printf_common+0x8e>
	...

08004598 <_printf_i>:
 8004598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	7e0f      	ldrb	r7, [r1, #24]
 800459e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045a0:	2f78      	cmp	r7, #120	; 0x78
 80045a2:	4691      	mov	r9, r2
 80045a4:	4680      	mov	r8, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	469a      	mov	sl, r3
 80045aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045ae:	d807      	bhi.n	80045c0 <_printf_i+0x28>
 80045b0:	2f62      	cmp	r7, #98	; 0x62
 80045b2:	d80a      	bhi.n	80045ca <_printf_i+0x32>
 80045b4:	2f00      	cmp	r7, #0
 80045b6:	f000 80d8 	beq.w	800476a <_printf_i+0x1d2>
 80045ba:	2f58      	cmp	r7, #88	; 0x58
 80045bc:	f000 80a3 	beq.w	8004706 <_printf_i+0x16e>
 80045c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045c8:	e03a      	b.n	8004640 <_printf_i+0xa8>
 80045ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ce:	2b15      	cmp	r3, #21
 80045d0:	d8f6      	bhi.n	80045c0 <_printf_i+0x28>
 80045d2:	a101      	add	r1, pc, #4	; (adr r1, 80045d8 <_printf_i+0x40>)
 80045d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d8:	08004631 	.word	0x08004631
 80045dc:	08004645 	.word	0x08004645
 80045e0:	080045c1 	.word	0x080045c1
 80045e4:	080045c1 	.word	0x080045c1
 80045e8:	080045c1 	.word	0x080045c1
 80045ec:	080045c1 	.word	0x080045c1
 80045f0:	08004645 	.word	0x08004645
 80045f4:	080045c1 	.word	0x080045c1
 80045f8:	080045c1 	.word	0x080045c1
 80045fc:	080045c1 	.word	0x080045c1
 8004600:	080045c1 	.word	0x080045c1
 8004604:	08004751 	.word	0x08004751
 8004608:	08004675 	.word	0x08004675
 800460c:	08004733 	.word	0x08004733
 8004610:	080045c1 	.word	0x080045c1
 8004614:	080045c1 	.word	0x080045c1
 8004618:	08004773 	.word	0x08004773
 800461c:	080045c1 	.word	0x080045c1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045c1 	.word	0x080045c1
 8004628:	080045c1 	.word	0x080045c1
 800462c:	0800473b 	.word	0x0800473b
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	602a      	str	r2, [r5, #0]
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004640:	2301      	movs	r3, #1
 8004642:	e0a3      	b.n	800478c <_printf_i+0x1f4>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	6829      	ldr	r1, [r5, #0]
 8004648:	0606      	lsls	r6, r0, #24
 800464a:	f101 0304 	add.w	r3, r1, #4
 800464e:	d50a      	bpl.n	8004666 <_printf_i+0xce>
 8004650:	680e      	ldr	r6, [r1, #0]
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	2e00      	cmp	r6, #0
 8004656:	da03      	bge.n	8004660 <_printf_i+0xc8>
 8004658:	232d      	movs	r3, #45	; 0x2d
 800465a:	4276      	negs	r6, r6
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004660:	485e      	ldr	r0, [pc, #376]	; (80047dc <_printf_i+0x244>)
 8004662:	230a      	movs	r3, #10
 8004664:	e019      	b.n	800469a <_printf_i+0x102>
 8004666:	680e      	ldr	r6, [r1, #0]
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800466e:	bf18      	it	ne
 8004670:	b236      	sxthne	r6, r6
 8004672:	e7ef      	b.n	8004654 <_printf_i+0xbc>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	6029      	str	r1, [r5, #0]
 800467c:	0601      	lsls	r1, r0, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0xec>
 8004680:	681e      	ldr	r6, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0xf2>
 8004684:	0646      	lsls	r6, r0, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0xe8>
 8004688:	881e      	ldrh	r6, [r3, #0]
 800468a:	4854      	ldr	r0, [pc, #336]	; (80047dc <_printf_i+0x244>)
 800468c:	2f6f      	cmp	r7, #111	; 0x6f
 800468e:	bf0c      	ite	eq
 8004690:	2308      	moveq	r3, #8
 8004692:	230a      	movne	r3, #10
 8004694:	2100      	movs	r1, #0
 8004696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469a:	6865      	ldr	r5, [r4, #4]
 800469c:	60a5      	str	r5, [r4, #8]
 800469e:	2d00      	cmp	r5, #0
 80046a0:	bfa2      	ittt	ge
 80046a2:	6821      	ldrge	r1, [r4, #0]
 80046a4:	f021 0104 	bicge.w	r1, r1, #4
 80046a8:	6021      	strge	r1, [r4, #0]
 80046aa:	b90e      	cbnz	r6, 80046b0 <_printf_i+0x118>
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d04d      	beq.n	800474c <_printf_i+0x1b4>
 80046b0:	4615      	mov	r5, r2
 80046b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80046b6:	fb03 6711 	mls	r7, r3, r1, r6
 80046ba:	5dc7      	ldrb	r7, [r0, r7]
 80046bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046c0:	4637      	mov	r7, r6
 80046c2:	42bb      	cmp	r3, r7
 80046c4:	460e      	mov	r6, r1
 80046c6:	d9f4      	bls.n	80046b2 <_printf_i+0x11a>
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d10b      	bne.n	80046e4 <_printf_i+0x14c>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	07de      	lsls	r6, r3, #31
 80046d0:	d508      	bpl.n	80046e4 <_printf_i+0x14c>
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	6861      	ldr	r1, [r4, #4]
 80046d6:	4299      	cmp	r1, r3
 80046d8:	bfde      	ittt	le
 80046da:	2330      	movle	r3, #48	; 0x30
 80046dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046e4:	1b52      	subs	r2, r2, r5
 80046e6:	6122      	str	r2, [r4, #16]
 80046e8:	f8cd a000 	str.w	sl, [sp]
 80046ec:	464b      	mov	r3, r9
 80046ee:	aa03      	add	r2, sp, #12
 80046f0:	4621      	mov	r1, r4
 80046f2:	4640      	mov	r0, r8
 80046f4:	f7ff fee2 	bl	80044bc <_printf_common>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d14c      	bne.n	8004796 <_printf_i+0x1fe>
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	b004      	add	sp, #16
 8004702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004706:	4835      	ldr	r0, [pc, #212]	; (80047dc <_printf_i+0x244>)
 8004708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800470c:	6829      	ldr	r1, [r5, #0]
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f851 6b04 	ldr.w	r6, [r1], #4
 8004714:	6029      	str	r1, [r5, #0]
 8004716:	061d      	lsls	r5, r3, #24
 8004718:	d514      	bpl.n	8004744 <_printf_i+0x1ac>
 800471a:	07df      	lsls	r7, r3, #31
 800471c:	bf44      	itt	mi
 800471e:	f043 0320 	orrmi.w	r3, r3, #32
 8004722:	6023      	strmi	r3, [r4, #0]
 8004724:	b91e      	cbnz	r6, 800472e <_printf_i+0x196>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f023 0320 	bic.w	r3, r3, #32
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	2310      	movs	r3, #16
 8004730:	e7b0      	b.n	8004694 <_printf_i+0xfc>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	f043 0320 	orr.w	r3, r3, #32
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	2378      	movs	r3, #120	; 0x78
 800473c:	4828      	ldr	r0, [pc, #160]	; (80047e0 <_printf_i+0x248>)
 800473e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004742:	e7e3      	b.n	800470c <_printf_i+0x174>
 8004744:	0659      	lsls	r1, r3, #25
 8004746:	bf48      	it	mi
 8004748:	b2b6      	uxthmi	r6, r6
 800474a:	e7e6      	b.n	800471a <_printf_i+0x182>
 800474c:	4615      	mov	r5, r2
 800474e:	e7bb      	b.n	80046c8 <_printf_i+0x130>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	6826      	ldr	r6, [r4, #0]
 8004754:	6961      	ldr	r1, [r4, #20]
 8004756:	1d18      	adds	r0, r3, #4
 8004758:	6028      	str	r0, [r5, #0]
 800475a:	0635      	lsls	r5, r6, #24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	d501      	bpl.n	8004764 <_printf_i+0x1cc>
 8004760:	6019      	str	r1, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0x1d2>
 8004764:	0670      	lsls	r0, r6, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0x1c8>
 8004768:	8019      	strh	r1, [r3, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	4615      	mov	r5, r2
 8004770:	e7ba      	b.n	80046e8 <_printf_i+0x150>
 8004772:	682b      	ldr	r3, [r5, #0]
 8004774:	1d1a      	adds	r2, r3, #4
 8004776:	602a      	str	r2, [r5, #0]
 8004778:	681d      	ldr	r5, [r3, #0]
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	2100      	movs	r1, #0
 800477e:	4628      	mov	r0, r5
 8004780:	f7fb fd5e 	bl	8000240 <memchr>
 8004784:	b108      	cbz	r0, 800478a <_printf_i+0x1f2>
 8004786:	1b40      	subs	r0, r0, r5
 8004788:	6060      	str	r0, [r4, #4]
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	2300      	movs	r3, #0
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004794:	e7a8      	b.n	80046e8 <_printf_i+0x150>
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	462a      	mov	r2, r5
 800479a:	4649      	mov	r1, r9
 800479c:	4640      	mov	r0, r8
 800479e:	47d0      	blx	sl
 80047a0:	3001      	adds	r0, #1
 80047a2:	d0ab      	beq.n	80046fc <_printf_i+0x164>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	079b      	lsls	r3, r3, #30
 80047a8:	d413      	bmi.n	80047d2 <_printf_i+0x23a>
 80047aa:	68e0      	ldr	r0, [r4, #12]
 80047ac:	9b03      	ldr	r3, [sp, #12]
 80047ae:	4298      	cmp	r0, r3
 80047b0:	bfb8      	it	lt
 80047b2:	4618      	movlt	r0, r3
 80047b4:	e7a4      	b.n	8004700 <_printf_i+0x168>
 80047b6:	2301      	movs	r3, #1
 80047b8:	4632      	mov	r2, r6
 80047ba:	4649      	mov	r1, r9
 80047bc:	4640      	mov	r0, r8
 80047be:	47d0      	blx	sl
 80047c0:	3001      	adds	r0, #1
 80047c2:	d09b      	beq.n	80046fc <_printf_i+0x164>
 80047c4:	3501      	adds	r5, #1
 80047c6:	68e3      	ldr	r3, [r4, #12]
 80047c8:	9903      	ldr	r1, [sp, #12]
 80047ca:	1a5b      	subs	r3, r3, r1
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dcf2      	bgt.n	80047b6 <_printf_i+0x21e>
 80047d0:	e7eb      	b.n	80047aa <_printf_i+0x212>
 80047d2:	2500      	movs	r5, #0
 80047d4:	f104 0619 	add.w	r6, r4, #25
 80047d8:	e7f5      	b.n	80047c6 <_printf_i+0x22e>
 80047da:	bf00      	nop
 80047dc:	08004c2d 	.word	0x08004c2d
 80047e0:	08004c3e 	.word	0x08004c3e

080047e4 <memcpy>:
 80047e4:	440a      	add	r2, r1
 80047e6:	4291      	cmp	r1, r2
 80047e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047ec:	d100      	bne.n	80047f0 <memcpy+0xc>
 80047ee:	4770      	bx	lr
 80047f0:	b510      	push	{r4, lr}
 80047f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047fa:	4291      	cmp	r1, r2
 80047fc:	d1f9      	bne.n	80047f2 <memcpy+0xe>
 80047fe:	bd10      	pop	{r4, pc}

08004800 <memmove>:
 8004800:	4288      	cmp	r0, r1
 8004802:	b510      	push	{r4, lr}
 8004804:	eb01 0402 	add.w	r4, r1, r2
 8004808:	d902      	bls.n	8004810 <memmove+0x10>
 800480a:	4284      	cmp	r4, r0
 800480c:	4623      	mov	r3, r4
 800480e:	d807      	bhi.n	8004820 <memmove+0x20>
 8004810:	1e43      	subs	r3, r0, #1
 8004812:	42a1      	cmp	r1, r4
 8004814:	d008      	beq.n	8004828 <memmove+0x28>
 8004816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800481a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800481e:	e7f8      	b.n	8004812 <memmove+0x12>
 8004820:	4402      	add	r2, r0
 8004822:	4601      	mov	r1, r0
 8004824:	428a      	cmp	r2, r1
 8004826:	d100      	bne.n	800482a <memmove+0x2a>
 8004828:	bd10      	pop	{r4, pc}
 800482a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800482e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004832:	e7f7      	b.n	8004824 <memmove+0x24>

08004834 <_free_r>:
 8004834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004836:	2900      	cmp	r1, #0
 8004838:	d044      	beq.n	80048c4 <_free_r+0x90>
 800483a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800483e:	9001      	str	r0, [sp, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f1a1 0404 	sub.w	r4, r1, #4
 8004846:	bfb8      	it	lt
 8004848:	18e4      	addlt	r4, r4, r3
 800484a:	f000 f913 	bl	8004a74 <__malloc_lock>
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <_free_r+0x94>)
 8004850:	9801      	ldr	r0, [sp, #4]
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	b933      	cbnz	r3, 8004864 <_free_r+0x30>
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	6014      	str	r4, [r2, #0]
 800485a:	b003      	add	sp, #12
 800485c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004860:	f000 b90e 	b.w	8004a80 <__malloc_unlock>
 8004864:	42a3      	cmp	r3, r4
 8004866:	d908      	bls.n	800487a <_free_r+0x46>
 8004868:	6825      	ldr	r5, [r4, #0]
 800486a:	1961      	adds	r1, r4, r5
 800486c:	428b      	cmp	r3, r1
 800486e:	bf01      	itttt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	1949      	addeq	r1, r1, r5
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	e7ed      	b.n	8004856 <_free_r+0x22>
 800487a:	461a      	mov	r2, r3
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b10b      	cbz	r3, 8004884 <_free_r+0x50>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d9fa      	bls.n	800487a <_free_r+0x46>
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	1855      	adds	r5, r2, r1
 8004888:	42a5      	cmp	r5, r4
 800488a:	d10b      	bne.n	80048a4 <_free_r+0x70>
 800488c:	6824      	ldr	r4, [r4, #0]
 800488e:	4421      	add	r1, r4
 8004890:	1854      	adds	r4, r2, r1
 8004892:	42a3      	cmp	r3, r4
 8004894:	6011      	str	r1, [r2, #0]
 8004896:	d1e0      	bne.n	800485a <_free_r+0x26>
 8004898:	681c      	ldr	r4, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	6053      	str	r3, [r2, #4]
 800489e:	4421      	add	r1, r4
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	e7da      	b.n	800485a <_free_r+0x26>
 80048a4:	d902      	bls.n	80048ac <_free_r+0x78>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6003      	str	r3, [r0, #0]
 80048aa:	e7d6      	b.n	800485a <_free_r+0x26>
 80048ac:	6825      	ldr	r5, [r4, #0]
 80048ae:	1961      	adds	r1, r4, r5
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf04      	itt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	bf04      	itt	eq
 80048bc:	1949      	addeq	r1, r1, r5
 80048be:	6021      	streq	r1, [r4, #0]
 80048c0:	6054      	str	r4, [r2, #4]
 80048c2:	e7ca      	b.n	800485a <_free_r+0x26>
 80048c4:	b003      	add	sp, #12
 80048c6:	bd30      	pop	{r4, r5, pc}
 80048c8:	200005d8 	.word	0x200005d8

080048cc <sbrk_aligned>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	4e0e      	ldr	r6, [pc, #56]	; (8004908 <sbrk_aligned+0x3c>)
 80048d0:	460c      	mov	r4, r1
 80048d2:	6831      	ldr	r1, [r6, #0]
 80048d4:	4605      	mov	r5, r0
 80048d6:	b911      	cbnz	r1, 80048de <sbrk_aligned+0x12>
 80048d8:	f000 f8bc 	bl	8004a54 <_sbrk_r>
 80048dc:	6030      	str	r0, [r6, #0]
 80048de:	4621      	mov	r1, r4
 80048e0:	4628      	mov	r0, r5
 80048e2:	f000 f8b7 	bl	8004a54 <_sbrk_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	d00a      	beq.n	8004900 <sbrk_aligned+0x34>
 80048ea:	1cc4      	adds	r4, r0, #3
 80048ec:	f024 0403 	bic.w	r4, r4, #3
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d007      	beq.n	8004904 <sbrk_aligned+0x38>
 80048f4:	1a21      	subs	r1, r4, r0
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 f8ac 	bl	8004a54 <_sbrk_r>
 80048fc:	3001      	adds	r0, #1
 80048fe:	d101      	bne.n	8004904 <sbrk_aligned+0x38>
 8004900:	f04f 34ff 	mov.w	r4, #4294967295
 8004904:	4620      	mov	r0, r4
 8004906:	bd70      	pop	{r4, r5, r6, pc}
 8004908:	200005dc 	.word	0x200005dc

0800490c <_malloc_r>:
 800490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004910:	1ccd      	adds	r5, r1, #3
 8004912:	f025 0503 	bic.w	r5, r5, #3
 8004916:	3508      	adds	r5, #8
 8004918:	2d0c      	cmp	r5, #12
 800491a:	bf38      	it	cc
 800491c:	250c      	movcc	r5, #12
 800491e:	2d00      	cmp	r5, #0
 8004920:	4607      	mov	r7, r0
 8004922:	db01      	blt.n	8004928 <_malloc_r+0x1c>
 8004924:	42a9      	cmp	r1, r5
 8004926:	d905      	bls.n	8004934 <_malloc_r+0x28>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	2600      	movs	r6, #0
 800492e:	4630      	mov	r0, r6
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004934:	4e2e      	ldr	r6, [pc, #184]	; (80049f0 <_malloc_r+0xe4>)
 8004936:	f000 f89d 	bl	8004a74 <__malloc_lock>
 800493a:	6833      	ldr	r3, [r6, #0]
 800493c:	461c      	mov	r4, r3
 800493e:	bb34      	cbnz	r4, 800498e <_malloc_r+0x82>
 8004940:	4629      	mov	r1, r5
 8004942:	4638      	mov	r0, r7
 8004944:	f7ff ffc2 	bl	80048cc <sbrk_aligned>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	4604      	mov	r4, r0
 800494c:	d14d      	bne.n	80049ea <_malloc_r+0xde>
 800494e:	6834      	ldr	r4, [r6, #0]
 8004950:	4626      	mov	r6, r4
 8004952:	2e00      	cmp	r6, #0
 8004954:	d140      	bne.n	80049d8 <_malloc_r+0xcc>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	4631      	mov	r1, r6
 800495a:	4638      	mov	r0, r7
 800495c:	eb04 0803 	add.w	r8, r4, r3
 8004960:	f000 f878 	bl	8004a54 <_sbrk_r>
 8004964:	4580      	cmp	r8, r0
 8004966:	d13a      	bne.n	80049de <_malloc_r+0xd2>
 8004968:	6821      	ldr	r1, [r4, #0]
 800496a:	3503      	adds	r5, #3
 800496c:	1a6d      	subs	r5, r5, r1
 800496e:	f025 0503 	bic.w	r5, r5, #3
 8004972:	3508      	adds	r5, #8
 8004974:	2d0c      	cmp	r5, #12
 8004976:	bf38      	it	cc
 8004978:	250c      	movcc	r5, #12
 800497a:	4629      	mov	r1, r5
 800497c:	4638      	mov	r0, r7
 800497e:	f7ff ffa5 	bl	80048cc <sbrk_aligned>
 8004982:	3001      	adds	r0, #1
 8004984:	d02b      	beq.n	80049de <_malloc_r+0xd2>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	442b      	add	r3, r5
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	e00e      	b.n	80049ac <_malloc_r+0xa0>
 800498e:	6822      	ldr	r2, [r4, #0]
 8004990:	1b52      	subs	r2, r2, r5
 8004992:	d41e      	bmi.n	80049d2 <_malloc_r+0xc6>
 8004994:	2a0b      	cmp	r2, #11
 8004996:	d916      	bls.n	80049c6 <_malloc_r+0xba>
 8004998:	1961      	adds	r1, r4, r5
 800499a:	42a3      	cmp	r3, r4
 800499c:	6025      	str	r5, [r4, #0]
 800499e:	bf18      	it	ne
 80049a0:	6059      	strne	r1, [r3, #4]
 80049a2:	6863      	ldr	r3, [r4, #4]
 80049a4:	bf08      	it	eq
 80049a6:	6031      	streq	r1, [r6, #0]
 80049a8:	5162      	str	r2, [r4, r5]
 80049aa:	604b      	str	r3, [r1, #4]
 80049ac:	4638      	mov	r0, r7
 80049ae:	f104 060b 	add.w	r6, r4, #11
 80049b2:	f000 f865 	bl	8004a80 <__malloc_unlock>
 80049b6:	f026 0607 	bic.w	r6, r6, #7
 80049ba:	1d23      	adds	r3, r4, #4
 80049bc:	1af2      	subs	r2, r6, r3
 80049be:	d0b6      	beq.n	800492e <_malloc_r+0x22>
 80049c0:	1b9b      	subs	r3, r3, r6
 80049c2:	50a3      	str	r3, [r4, r2]
 80049c4:	e7b3      	b.n	800492e <_malloc_r+0x22>
 80049c6:	6862      	ldr	r2, [r4, #4]
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	bf0c      	ite	eq
 80049cc:	6032      	streq	r2, [r6, #0]
 80049ce:	605a      	strne	r2, [r3, #4]
 80049d0:	e7ec      	b.n	80049ac <_malloc_r+0xa0>
 80049d2:	4623      	mov	r3, r4
 80049d4:	6864      	ldr	r4, [r4, #4]
 80049d6:	e7b2      	b.n	800493e <_malloc_r+0x32>
 80049d8:	4634      	mov	r4, r6
 80049da:	6876      	ldr	r6, [r6, #4]
 80049dc:	e7b9      	b.n	8004952 <_malloc_r+0x46>
 80049de:	230c      	movs	r3, #12
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	4638      	mov	r0, r7
 80049e4:	f000 f84c 	bl	8004a80 <__malloc_unlock>
 80049e8:	e7a1      	b.n	800492e <_malloc_r+0x22>
 80049ea:	6025      	str	r5, [r4, #0]
 80049ec:	e7de      	b.n	80049ac <_malloc_r+0xa0>
 80049ee:	bf00      	nop
 80049f0:	200005d8 	.word	0x200005d8

080049f4 <_realloc_r>:
 80049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f8:	4680      	mov	r8, r0
 80049fa:	4614      	mov	r4, r2
 80049fc:	460e      	mov	r6, r1
 80049fe:	b921      	cbnz	r1, 8004a0a <_realloc_r+0x16>
 8004a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a04:	4611      	mov	r1, r2
 8004a06:	f7ff bf81 	b.w	800490c <_malloc_r>
 8004a0a:	b92a      	cbnz	r2, 8004a18 <_realloc_r+0x24>
 8004a0c:	f7ff ff12 	bl	8004834 <_free_r>
 8004a10:	4625      	mov	r5, r4
 8004a12:	4628      	mov	r0, r5
 8004a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a18:	f000 f838 	bl	8004a8c <_malloc_usable_size_r>
 8004a1c:	4284      	cmp	r4, r0
 8004a1e:	4607      	mov	r7, r0
 8004a20:	d802      	bhi.n	8004a28 <_realloc_r+0x34>
 8004a22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a26:	d812      	bhi.n	8004a4e <_realloc_r+0x5a>
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7ff ff6e 	bl	800490c <_malloc_r>
 8004a30:	4605      	mov	r5, r0
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d0ed      	beq.n	8004a12 <_realloc_r+0x1e>
 8004a36:	42bc      	cmp	r4, r7
 8004a38:	4622      	mov	r2, r4
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	bf28      	it	cs
 8004a3e:	463a      	movcs	r2, r7
 8004a40:	f7ff fed0 	bl	80047e4 <memcpy>
 8004a44:	4631      	mov	r1, r6
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7ff fef4 	bl	8004834 <_free_r>
 8004a4c:	e7e1      	b.n	8004a12 <_realloc_r+0x1e>
 8004a4e:	4635      	mov	r5, r6
 8004a50:	e7df      	b.n	8004a12 <_realloc_r+0x1e>
	...

08004a54 <_sbrk_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d06      	ldr	r5, [pc, #24]	; (8004a70 <_sbrk_r+0x1c>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fc f95e 	bl	8000d20 <_sbrk>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_sbrk_r+0x1a>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_sbrk_r+0x1a>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	200005e0 	.word	0x200005e0

08004a74 <__malloc_lock>:
 8004a74:	4801      	ldr	r0, [pc, #4]	; (8004a7c <__malloc_lock+0x8>)
 8004a76:	f000 b811 	b.w	8004a9c <__retarget_lock_acquire_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	200005e4 	.word	0x200005e4

08004a80 <__malloc_unlock>:
 8004a80:	4801      	ldr	r0, [pc, #4]	; (8004a88 <__malloc_unlock+0x8>)
 8004a82:	f000 b80c 	b.w	8004a9e <__retarget_lock_release_recursive>
 8004a86:	bf00      	nop
 8004a88:	200005e4 	.word	0x200005e4

08004a8c <_malloc_usable_size_r>:
 8004a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a90:	1f18      	subs	r0, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bfbc      	itt	lt
 8004a96:	580b      	ldrlt	r3, [r1, r0]
 8004a98:	18c0      	addlt	r0, r0, r3
 8004a9a:	4770      	bx	lr

08004a9c <__retarget_lock_acquire_recursive>:
 8004a9c:	4770      	bx	lr

08004a9e <__retarget_lock_release_recursive>:
 8004a9e:	4770      	bx	lr

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
