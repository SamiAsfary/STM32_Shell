
Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003724  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800390c  0800390c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003914  08003914  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800391c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08003928  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003928  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1f7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b53  00000000  00000000  0002b233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248af  00000000  00000000  0002dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8c2  00000000  00000000  0005257f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2203  00000000  00000000  0005de41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e84  00000000  00000000  00140094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080038d4 	.word	0x080038d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080038d4 	.word	0x080038d4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_DMA_Init+0x48>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <MX_DMA_Init+0x48>)
 8000518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <MX_DMA_Init+0x48>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	203a      	movs	r0, #58	; 0x3a
 8000530:	f000 fb93 	bl	8000c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000534:	203a      	movs	r0, #58	; 0x3a
 8000536:	f000 fbac 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2046      	movs	r0, #70	; 0x46
 8000540:	f000 fb8b 	bl	8000c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000544:	2046      	movs	r0, #70	; 0x46
 8000546:	f000 fba4 	bl	8000c92 <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0x44>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_GPIO_Init+0x44>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_GPIO_Init+0x44>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_GPIO_Init+0x44>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <MX_GPIO_Init+0x44>)
 800057c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_GPIO_Init+0x44>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fa21 	bl	80009ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f808 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f7ff ffd4 	bl	8000558 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f7ff ffac 	bl	800050c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f8f4 	bl	80007a0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x18>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f97a 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <SystemClock_Config+0xd4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xd4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a25      	ldr	r2, [pc, #148]	; (8000694 <SystemClock_Config+0xd8>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <SystemClock_Config+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000624:	2319      	movs	r3, #25
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000628:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000632:	2309      	movs	r3, #9
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f8bc 	bl	80017b8 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000646:	f000 f827 	bl	8000698 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800064a:	f001 f865 	bl	8001718 <HAL_PWREx_EnableOverDrive>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000654:	f000 f820 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2106      	movs	r1, #6
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fb42 	bl	8001d00 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000682:	f000 f809 	bl	8000698 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_MspInit+0x44>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <HAL_MspInit+0x44>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_MspInit+0x44>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_MspInit+0x44>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_MspInit+0x44>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x44>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <NMI_Handler+0x4>

080006f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <MemManage_Handler+0x4>

080006fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <BusFault_Handler+0x4>

08000704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <UsageFault_Handler+0x4>

0800070a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f994 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <USART1_IRQHandler+0x10>)
 8000746:	f002 f8ff 	bl	8002948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028

08000754 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <DMA2_Stream2_IRQHandler+0x10>)
 800075a:	f000 fbf5 	bl	8000f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000b0 	.word	0x200000b0

08000768 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <DMA2_Stream7_IRQHandler+0x10>)
 800076e:	f000 fbeb 	bl	8000f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000110 	.word	0x20000110

0800077c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART1_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x58>)
 80007e4:	f002 f862 	bl	80028ac <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f7ff ff53 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40011000 	.word	0x40011000

08000800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0aa      	sub	sp, #168	; 0xa8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2284      	movs	r2, #132	; 0x84
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f003 f84f 	bl	80038c4 <memset>
  if(uartHandle->Instance==USART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a54      	ldr	r2, [pc, #336]	; (800097c <HAL_UART_MspInit+0x17c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	f040 80a0 	bne.w	8000972 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000832:	2340      	movs	r3, #64	; 0x40
 8000834:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000836:	2300      	movs	r3, #0
 8000838:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fc44 	bl	80020cc <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800084a:	f7ff ff25 	bl	8000698 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084e:	4b4c      	ldr	r3, [pc, #304]	; (8000980 <HAL_UART_MspInit+0x180>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a4b      	ldr	r2, [pc, #300]	; (8000980 <HAL_UART_MspInit+0x180>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b49      	ldr	r3, [pc, #292]	; (8000980 <HAL_UART_MspInit+0x180>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b46      	ldr	r3, [pc, #280]	; (8000980 <HAL_UART_MspInit+0x180>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a45      	ldr	r2, [pc, #276]	; (8000980 <HAL_UART_MspInit+0x180>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b43      	ldr	r3, [pc, #268]	; (8000980 <HAL_UART_MspInit+0x180>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800087e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000898:	2307      	movs	r3, #7
 800089a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80008a2:	4619      	mov	r1, r3
 80008a4:	4837      	ldr	r0, [pc, #220]	; (8000984 <HAL_UART_MspInit+0x184>)
 80008a6:	f000 fd8b 	bl	80013c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80008aa:	4b37      	ldr	r3, [pc, #220]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008ac:	4a37      	ldr	r2, [pc, #220]	; (800098c <HAL_UART_MspInit+0x18c>)
 80008ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80008b0:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008ea:	4827      	ldr	r0, [pc, #156]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008ec:	f000 f9ec 	bl	8000cc8 <HAL_DMA_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80008f6:	f7ff fecf 	bl	8000698 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <HAL_UART_MspInit+0x188>)
 80008fe:	675a      	str	r2, [r3, #116]	; 0x74
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <HAL_UART_MspInit+0x188>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <HAL_UART_MspInit+0x190>)
 8000908:	4a22      	ldr	r2, [pc, #136]	; (8000994 <HAL_UART_MspInit+0x194>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_UART_MspInit+0x190>)
 800090e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000912:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <HAL_UART_MspInit+0x190>)
 8000916:	2240      	movs	r2, #64	; 0x40
 8000918:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_UART_MspInit+0x190>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_UART_MspInit+0x190>)
 8000922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000926:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x190>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_UART_MspInit+0x190>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_UART_MspInit+0x190>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_UART_MspInit+0x190>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_UART_MspInit+0x190>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000946:	4812      	ldr	r0, [pc, #72]	; (8000990 <HAL_UART_MspInit+0x190>)
 8000948:	f000 f9be 	bl	8000cc8 <HAL_DMA_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8000952:	f7ff fea1 	bl	8000698 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_UART_MspInit+0x190>)
 800095a:	671a      	str	r2, [r3, #112]	; 0x70
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <HAL_UART_MspInit+0x190>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2025      	movs	r0, #37	; 0x25
 8000968:	f000 f977 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800096c:	2025      	movs	r0, #37	; 0x25
 800096e:	f000 f990 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000972:	bf00      	nop
 8000974:	37a8      	adds	r7, #168	; 0xa8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40011000 	.word	0x40011000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	200000b0 	.word	0x200000b0
 800098c:	40026440 	.word	0x40026440
 8000990:	20000110 	.word	0x20000110
 8000994:	400264b8 	.word	0x400264b8

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099e:	490e      	ldr	r1, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b4:	4c0b      	ldr	r4, [pc, #44]	; (80009e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c2:	f7ff fedb 	bl	800077c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f002 ff59 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fde9 	bl	80005a0 <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009dc:	0800391c 	.word	0x0800391c
  ldr r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e4:	20000174 	.word	0x20000174

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>

080009ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f928 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f4:	200f      	movs	r0, #15
 80009f6:	f000 f805 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fa:	f7ff fe53 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x54>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x58>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f943 	bl	8000cae <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00e      	b.n	8000a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d80a      	bhi.n	8000a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 f90b 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_InitTick+0x5c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x20>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x24>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_IncTick+0x24>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000170 	.word	0x20000170

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_GetTick+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000170 	.word	0x20000170

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	05fa0000 	.word	0x05fa0000

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff29 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff3e 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff8e 	bl	8000b98 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff31 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffa2 	bl	8000c00 <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff feda 	bl	8000a8c <HAL_GetTick>
 8000cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e099      	b.n	8000e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0201 	bic.w	r2, r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d04:	e00f      	b.n	8000d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d06:	f7ff fec1 	bl	8000a8c <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b05      	cmp	r3, #5
 8000d12:	d908      	bls.n	8000d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2220      	movs	r2, #32
 8000d18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e078      	b.n	8000e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1e8      	bne.n	8000d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	4b38      	ldr	r3, [pc, #224]	; (8000e20 <HAL_DMA_Init+0x158>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d107      	bne.n	8000d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f023 0307 	bic.w	r3, r3, #7
 8000da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d117      	bne.n	8000dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00e      	beq.n	8000dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 fa7b 	bl	80012c8 <DMA_CheckFifoParam>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d008      	beq.n	8000dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2240      	movs	r2, #64	; 0x40
 8000ddc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000de6:	2301      	movs	r3, #1
 8000de8:	e016      	b.n	8000e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 fa32 	bl	800125c <DMA_CalcBaseAndBitshift>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e00:	223f      	movs	r2, #63	; 0x3f
 8000e02:	409a      	lsls	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	f010803f 	.word	0xf010803f

08000e24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e32:	f7ff fe2b 	bl	8000a8c <HAL_GetTick>
 8000e36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d008      	beq.n	8000e56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e052      	b.n	8000efc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0216 	bic.w	r2, r2, #22
 8000e64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <HAL_DMA_Abort+0x62>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0208 	bic.w	r2, r2, #8
 8000e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea6:	e013      	b.n	8000ed0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ea8:	f7ff fdf0 	bl	8000a8c <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d90c      	bls.n	8000ed0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2220      	movs	r2, #32
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e015      	b.n	8000efc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1e4      	bne.n	8000ea8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee2:	223f      	movs	r2, #63	; 0x3f
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d004      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00c      	b.n	8000f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2205      	movs	r2, #5
 8000f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8000f54:	4b8e      	ldr	r3, [pc, #568]	; (8001190 <HAL_DMA_IRQHandler+0x248>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a8e      	ldr	r2, [pc, #568]	; (8001194 <HAL_DMA_IRQHandler+0x24c>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0a9b      	lsrs	r3, r3, #10
 8000f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f72:	2208      	movs	r2, #8
 8000f74:	409a      	lsls	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d01a      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0204 	bic.w	r2, r2, #4
 8000f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb8:	2201      	movs	r2, #1
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d012      	beq.n	8000fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe2:	f043 0202 	orr.w	r2, r3, #2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fee:	2204      	movs	r2, #4
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d012      	beq.n	8001020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100c:	2204      	movs	r2, #4
 800100e:	409a      	lsls	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	f043 0204 	orr.w	r2, r3, #4
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001024:	2210      	movs	r2, #16
 8001026:	409a      	lsls	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4013      	ands	r3, r2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d043      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d03c      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001042:	2210      	movs	r2, #16
 8001044:	409a      	lsls	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d018      	beq.n	800108a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d108      	bne.n	8001078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d024      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
 8001076:	e01f      	b.n	80010b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107c:	2b00      	cmp	r3, #0
 800107e:	d01b      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	4798      	blx	r3
 8001088:	e016      	b.n	80010b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0208 	bic.w	r2, r2, #8
 80010a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010bc:	2220      	movs	r2, #32
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 808f 	beq.w	80011e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8087 	beq.w	80011e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010de:	2220      	movs	r2, #32
 80010e0:	409a      	lsls	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d136      	bne.n	8001160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0216 	bic.w	r2, r2, #22
 8001100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695a      	ldr	r2, [r3, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <HAL_DMA_IRQHandler+0x1da>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0208 	bic.w	r2, r2, #8
 8001130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	223f      	movs	r2, #63	; 0x3f
 8001138:	409a      	lsls	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001152:	2b00      	cmp	r3, #0
 8001154:	d07e      	beq.n	8001254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	4798      	blx	r3
        }
        return;
 800115e:	e079      	b.n	8001254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01d      	beq.n	80011aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10d      	bne.n	8001198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	2b00      	cmp	r3, #0
 8001182:	d031      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	4798      	blx	r3
 800118c:	e02c      	b.n	80011e8 <HAL_DMA_IRQHandler+0x2a0>
 800118e:	bf00      	nop
 8001190:	20000000 	.word	0x20000000
 8001194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119c:	2b00      	cmp	r3, #0
 800119e:	d023      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	4798      	blx	r3
 80011a8:	e01e      	b.n	80011e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10f      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0210 	bic.w	r2, r2, #16
 80011c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d032      	beq.n	8001256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d022      	beq.n	8001242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2205      	movs	r2, #5
 8001200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	3301      	adds	r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	d307      	bcc.n	8001230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f2      	bne.n	8001214 <HAL_DMA_IRQHandler+0x2cc>
 800122e:	e000      	b.n	8001232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	4798      	blx	r3
 8001252:	e000      	b.n	8001256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001254:	bf00      	nop
    }
  }
}
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	3b10      	subs	r3, #16
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <DMA_CalcBaseAndBitshift+0x60>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <DMA_CalcBaseAndBitshift+0x64>)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d908      	bls.n	800129c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <DMA_CalcBaseAndBitshift+0x68>)
 8001292:	4013      	ands	r3, r2
 8001294:	1d1a      	adds	r2, r3, #4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	659a      	str	r2, [r3, #88]	; 0x58
 800129a:	e006      	b.n	80012aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <DMA_CalcBaseAndBitshift+0x68>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	aaaaaaab 	.word	0xaaaaaaab
 80012c0:	08003904 	.word	0x08003904
 80012c4:	fffffc00 	.word	0xfffffc00

080012c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11f      	bne.n	8001322 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d856      	bhi.n	8001396 <DMA_CheckFifoParam+0xce>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <DMA_CheckFifoParam+0x28>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001301 	.word	0x08001301
 80012f4:	08001313 	.word	0x08001313
 80012f8:	08001301 	.word	0x08001301
 80012fc:	08001397 	.word	0x08001397
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d046      	beq.n	800139a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001310:	e043      	b.n	800139a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800131a:	d140      	bne.n	800139e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001320:	e03d      	b.n	800139e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800132a:	d121      	bne.n	8001370 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d837      	bhi.n	80013a2 <DMA_CheckFifoParam+0xda>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <DMA_CheckFifoParam+0x70>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001349 	.word	0x08001349
 800133c:	0800134f 	.word	0x0800134f
 8001340:	08001349 	.word	0x08001349
 8001344:	08001361 	.word	0x08001361
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
      break;
 800134c:	e030      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d025      	beq.n	80013a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800135e:	e022      	b.n	80013a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001368:	d11f      	bne.n	80013aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800136e:	e01c      	b.n	80013aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d903      	bls.n	800137e <DMA_CheckFifoParam+0xb6>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d003      	beq.n	8001384 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800137c:	e018      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
      break;
 8001382:	e015      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00e      	beq.n	80013ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
      break;
 8001394:	e00b      	b.n	80013ae <DMA_CheckFifoParam+0xe6>
      break;
 8001396:	bf00      	nop
 8001398:	e00a      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      break;
 800139a:	bf00      	nop
 800139c:	e008      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      break;
 800139e:	bf00      	nop
 80013a0:	e006      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      break;
 80013a2:	bf00      	nop
 80013a4:	e004      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      break;
 80013a6:	bf00      	nop
 80013a8:	e002      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80013aa:	bf00      	nop
 80013ac:	e000      	b.n	80013b0 <DMA_CheckFifoParam+0xe8>
      break;
 80013ae:	bf00      	nop
    }
  } 
  
  return status; 
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e175      	b.n	80016cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8164 	bne.w	80016c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_GPIO_Init+0x56>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b03      	cmp	r3, #3
 8001482:	d017      	beq.n	80014b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80be 	beq.w	80016c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <HAL_GPIO_Init+0x324>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001562:	4a61      	ldr	r2, [pc, #388]	; (80016e8 <HAL_GPIO_Init+0x328>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_GPIO_Init+0x32c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d037      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d031      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <HAL_GPIO_Init+0x334>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d02b      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_GPIO_Init+0x338>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d025      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a54      	ldr	r2, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x33c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01f      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a53      	ldr	r2, [pc, #332]	; (8001700 <HAL_GPIO_Init+0x340>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0x22a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x344>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x348>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <HAL_GPIO_Init+0x222>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_GPIO_Init+0x34c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x21e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	; (8001710 <HAL_GPIO_Init+0x350>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_GPIO_Init+0x21a>
 80015d6:	2309      	movs	r3, #9
 80015d8:	e012      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015da:	230a      	movs	r3, #10
 80015dc:	e010      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015de:	2308      	movs	r3, #8
 80015e0:	e00e      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00c      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00a      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x328>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a34      	ldr	r2, [pc, #208]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_GPIO_Init+0x354>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a29      	ldr	r2, [pc, #164]	; (8001714 <HAL_GPIO_Init+0x354>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_GPIO_Init+0x354>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_GPIO_Init+0x354>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f ae86 	bls.w	80013e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40021400 	.word	0x40021400
 8001704:	40021800 	.word	0x40021800
 8001708:	40021c00 	.word	0x40021c00
 800170c:	40022000 	.word	0x40022000
 8001710:	40022400 	.word	0x40022400
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001746:	f7ff f9a1 	bl	8000a8c <HAL_GetTick>
 800174a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800174c:	e009      	b.n	8001762 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800174e:	f7ff f99d 	bl	8000a8c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175c:	d901      	bls.n	8001762 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e022      	b.n	80017a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176e:	d1ee      	bne.n	800174e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800177c:	f7ff f986 	bl	8000a8c <HAL_GetTick>
 8001780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001782:	e009      	b.n	8001798 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001784:	f7ff f982 	bl	8000a8c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001792:	d901      	bls.n	8001798 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e007      	b.n	80017a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017a4:	d1ee      	bne.n	8001784 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e291      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017dc:	4b96      	ldr	r3, [pc, #600]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00c      	beq.n	8001802 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e8:	4b93      	ldr	r3, [pc, #588]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d112      	bne.n	800181a <HAL_RCC_OscConfig+0x62>
 80017f4:	4b90      	ldr	r3, [pc, #576]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b8d      	ldr	r3, [pc, #564]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d06c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x130>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d168      	bne.n	80018e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e26b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x7a>
 8001824:	4b84      	ldr	r3, [pc, #528]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a83      	ldr	r2, [pc, #524]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e02e      	b.n	8001890 <HAL_RCC_OscConfig+0xd8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x9c>
 800183a:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7e      	ldr	r2, [pc, #504]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7b      	ldr	r2, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xd8>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xc0>
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a72      	ldr	r2, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xd8>
 8001878:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b6c      	ldr	r3, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6b      	ldr	r2, [pc, #428]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f8f8 	bl	8000a8c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f8f4 	bl	8000a8c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e21f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe8>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f8e4 	bl	8000a8c <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f8e0 	bl	8000a8c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e20b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x110>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d069      	beq.n	80019ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f6:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x190>
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x17a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1df      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	493d      	ldr	r1, [pc, #244]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e040      	b.n	80019ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f896 	bl	8000a8c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001964:	f7ff f892 	bl	8000a8c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1bd      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4929      	ldr	r1, [pc, #164]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
 8001996:	e018      	b.n	80019ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f872 	bl	8000a8c <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff f86e 	bl	8000a8c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e199      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d038      	beq.n	8001a48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d019      	beq.n	8001a12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f84f 	bl	8000a8c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff f84b 	bl	8000a8c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e176      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x23a>
 8001a10:	e01a      	b.n	8001a48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_RCC_OscConfig+0x280>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f835 	bl	8000a8c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff f831 	bl	8000a8c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d903      	bls.n	8001a3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e15c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
 8001a38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	4b91      	ldr	r3, [pc, #580]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a4 	beq.w	8001b9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b8b      	ldr	r3, [pc, #556]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a87      	ldr	r2, [pc, #540]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d118      	bne.n	8001abc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x4d0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x4d0>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a96:	f7fe fff9 	bl	8000a8c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7fe fff5 	bl	8000a8c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e120      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4d0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x31a>
 8001ac4:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad0:	e02d      	b.n	8001b2e <HAL_RCC_OscConfig+0x376>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x33c>
 8001ada:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a69      	ldr	r2, [pc, #420]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	e01c      	b.n	8001b2e <HAL_RCC_OscConfig+0x376>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x35e>
 8001afc:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a60      	ldr	r2, [pc, #384]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a5d      	ldr	r2, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0x376>
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a5a      	ldr	r2, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d015      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7fe ffa9 	bl	8000a8c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7fe ffa5 	bl	8000a8c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0ce      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ee      	beq.n	8001b3e <HAL_RCC_OscConfig+0x386>
 8001b60:	e014      	b.n	8001b8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7fe ff93 	bl	8000a8c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7fe ff8f 	bl	8000a8c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0b8      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d105      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a3b      	ldr	r2, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80a4 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d06b      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d149      	bne.n	8001c50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7fe ff60 	bl	8000a8c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe ff5c 	bl	8000a8c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e087      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	4313      	orrs	r3, r2
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7fe ff30 	bl	8000a8c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe ff2c 	bl	8000a8c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e057      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x478>
 8001c4e:	e04f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ff16 	bl	8000a8c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7fe ff12 	bl	8000a8c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e03d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_OscConfig+0x4cc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4ac>
 8001c82:	e035      	b.n	8001cf0 <HAL_RCC_OscConfig+0x538>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x544>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d028      	beq.n	8001cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d121      	bne.n	8001cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d11a      	bne.n	8001cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d111      	bne.n	8001cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d0      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 020f 	bic.w	r2, r3, #15
 8001d2e:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e073      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06b      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7fe fe4a 	bl	8000a8c <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7fe fe46 	bl	8000a8c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e053      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 020f 	bic.w	r2, r3, #15
 8001e3a:	4922      	ldr	r1, [pc, #136]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1cc>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1d4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fda6 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	080038ec 	.word	0x080038ec
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001edc:	b090      	sub	sp, #64	; 0x40
 8001ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d00d      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x40>
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	f200 80a1 	bhi.w	8002044 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x34>
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f0a:	e09b      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f10:	e09b      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f16:	e098      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f18:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d028      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	2200      	movs	r2, #0
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	627a      	str	r2, [r7, #36]	; 0x24
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f40:	2100      	movs	r1, #0
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f44:	fb03 f201 	mul.w	r2, r3, r1
 8001f48:	2300      	movs	r3, #0
 8001f4a:	fb00 f303 	mul.w	r3, r0, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a43      	ldr	r2, [pc, #268]	; (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f52:	fba0 1202 	umull	r1, r2, r0, r2
 8001f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f58:	460a      	mov	r2, r1
 8001f5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5e:	4413      	add	r3, r2
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	2200      	movs	r2, #0
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	61fa      	str	r2, [r7, #28]
 8001f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f72:	f7fe f949 	bl	8000208 <__aeabi_uldivmod>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f7e:	e053      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	2200      	movs	r2, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	617a      	str	r2, [r7, #20]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f92:	f04f 0b00 	mov.w	fp, #0
 8001f96:	4652      	mov	r2, sl
 8001f98:	465b      	mov	r3, fp
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa8:	0150      	lsls	r0, r2, #5
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	ebb2 080a 	subs.w	r8, r2, sl
 8001fb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fca:	ebb2 0408 	subs.w	r4, r2, r8
 8001fce:	eb63 0509 	sbc.w	r5, r3, r9
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	00eb      	lsls	r3, r5, #3
 8001fdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe0:	00e2      	lsls	r2, r4, #3
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	eb14 030a 	adds.w	r3, r4, sl
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	eb45 030b 	adc.w	r3, r5, fp
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ffe:	4629      	mov	r1, r5
 8002000:	028b      	lsls	r3, r1, #10
 8002002:	4621      	mov	r1, r4
 8002004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002008:	4621      	mov	r1, r4
 800200a:	028a      	lsls	r2, r1, #10
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002012:	2200      	movs	r2, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800201c:	f7fe f8f4 	bl	8000208 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002042:	e002      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetSysClockFreq+0x184>)
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800204c:	4618      	mov	r0, r3
 800204e:	3740      	adds	r7, #64	; 0x40
 8002050:	46bd      	mov	sp, r7
 8002052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	00f42400 	.word	0x00f42400
 8002060:	017d7840 	.word	0x017d7840

08002064 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_RCC_GetHCLKFreq+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002080:	f7ff fff0 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0a9b      	lsrs	r3, r3, #10
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	080038fc 	.word	0x080038fc

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a8:	f7ff ffdc 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0b5b      	lsrs	r3, r3, #13
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4903      	ldr	r1, [pc, #12]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	080038fc 	.word	0x080038fc

080020cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f4:	4b69      	ldr	r3, [pc, #420]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a68      	ldr	r2, [pc, #416]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	4964      	ldr	r1, [pc, #400]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d017      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	4959      	ldr	r1, [pc, #356]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002144:	d101      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002146:	2301      	movs	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d017      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002162:	4b4e      	ldr	r3, [pc, #312]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	494a      	ldr	r1, [pc, #296]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 808b 	beq.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4a39      	ldr	r2, [pc, #228]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
 80021bc:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a34      	ldr	r2, [pc, #208]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d4:	f7fe fc5a 	bl	8000a8c <HAL_GetTick>
 80021d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021dc:	f7fe fc56 	bl	8000a8c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e357      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d035      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d02e      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d114      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fc1e 	bl	8000a8c <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	e00a      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fc1a 	bl	8000a8c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e319      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ee      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002282:	d111      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002292:	400b      	ands	r3, r1
 8002294:	4901      	ldr	r1, [pc, #4]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
 800229a:	e00b      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000
 80022a4:	0ffffcff 	.word	0x0ffffcff
 80022a8:	4baa      	ldr	r3, [pc, #680]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4aa9      	ldr	r2, [pc, #676]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	4ba7      	ldr	r3, [pc, #668]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	49a4      	ldr	r1, [pc, #656]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022d2:	4ba0      	ldr	r3, [pc, #640]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d8:	4a9e      	ldr	r2, [pc, #632]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022e2:	4b9c      	ldr	r3, [pc, #624]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	4999      	ldr	r1, [pc, #612]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002300:	4b94      	ldr	r3, [pc, #592]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230e:	4991      	ldr	r1, [pc, #580]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002322:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002330:	4988      	ldr	r1, [pc, #544]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002344:	4b83      	ldr	r3, [pc, #524]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002352:	4980      	ldr	r1, [pc, #512]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002366:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4977      	ldr	r1, [pc, #476]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002388:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	496f      	ldr	r1, [pc, #444]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023aa:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f023 020c 	bic.w	r2, r3, #12
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	4966      	ldr	r1, [pc, #408]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023cc:	4b61      	ldr	r3, [pc, #388]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	495e      	ldr	r1, [pc, #376]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ee:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	4955      	ldr	r1, [pc, #340]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	494d      	ldr	r1, [pc, #308]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002432:	4b48      	ldr	r3, [pc, #288]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4944      	ldr	r1, [pc, #272]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	493c      	ldr	r1, [pc, #240]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002484:	4933      	ldr	r1, [pc, #204]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a6:	492b      	ldr	r1, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d011      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c8:	4922      	ldr	r1, [pc, #136]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	4912      	ldr	r1, [pc, #72]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d006      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80d9 	beq.w	80026fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a01      	ldr	r2, [pc, #4]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800254e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002552:	e001      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002554:	40023800 	.word	0x40023800
 8002558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255a:	f7fe fa97 	bl	8000a8c <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002562:	f7fe fa93 	bl	8000a8c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	; 0x64
 800256e:	d901      	bls.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e194      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002574:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d021      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11d      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002594:	4b64      	ldr	r3, [pc, #400]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a8:	0e1b      	lsrs	r3, r3, #24
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	019a      	lsls	r2, r3, #6
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	071b      	lsls	r3, r3, #28
 80025c8:	4957      	ldr	r1, [pc, #348]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d02e      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fa:	d129      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025fc:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002602:	0c1b      	lsrs	r3, r3, #16
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800260c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002610:	0f1b      	lsrs	r3, r3, #28
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	019a      	lsls	r2, r3, #6
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	431a      	orrs	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	071b      	lsls	r3, r3, #28
 8002630:	493d      	ldr	r1, [pc, #244]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800263e:	f023 021f 	bic.w	r2, r3, #31
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	3b01      	subs	r3, #1
 8002648:	4937      	ldr	r1, [pc, #220]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01d      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800265e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002662:	0e1b      	lsrs	r3, r3, #24
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800266a:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002670:	0f1b      	lsrs	r3, r3, #28
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	019a      	lsls	r2, r3, #6
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	431a      	orrs	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	071b      	lsls	r3, r3, #28
 8002690:	4925      	ldr	r1, [pc, #148]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d011      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	019a      	lsls	r2, r3, #6
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	071b      	lsls	r3, r3, #28
 80026c0:	4919      	ldr	r1, [pc, #100]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d4:	f7fe f9da 	bl	8000a8c <HAL_GetTick>
 80026d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026dc:	f7fe f9d6 	bl	8000a8c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0d7      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 80cd 	bne.w	800289c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270e:	f7fe f9bd 	bl	8000a8c <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002714:	e00a      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002716:	f7fe f9b9 	bl	8000a8c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b64      	cmp	r3, #100	; 0x64
 8002722:	d903      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0ba      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002728:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800272c:	4b5e      	ldr	r3, [pc, #376]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002738:	d0ed      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002756:	2b00      	cmp	r3, #0
 8002758:	d02e      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d12a      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002762:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002770:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	0f1b      	lsrs	r3, r3, #28
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	019a      	lsls	r2, r3, #6
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	061b      	lsls	r3, r3, #24
 8002790:	431a      	orrs	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	071b      	lsls	r3, r3, #28
 8002796:	4944      	ldr	r1, [pc, #272]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800279e:	4b42      	ldr	r3, [pc, #264]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	493d      	ldr	r1, [pc, #244]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d022      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027cc:	d11d      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	0e1b      	lsrs	r3, r3, #24
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	0f1b      	lsrs	r3, r3, #28
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	019a      	lsls	r2, r3, #6
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	071b      	lsls	r3, r3, #28
 8002802:	4929      	ldr	r1, [pc, #164]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d028      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	0e1b      	lsrs	r3, r3, #24
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	019a      	lsls	r2, r3, #6
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	431a      	orrs	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	071b      	lsls	r3, r3, #28
 800284a:	4917      	ldr	r1, [pc, #92]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	4911      	ldr	r1, [pc, #68]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002874:	f7fe f90a 	bl	8000a8c <HAL_GetTick>
 8002878:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800287c:	f7fe f906 	bl	8000a8c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e007      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800289a:	d1ef      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e040      	b.n	8002940 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fd ff96 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fb1e 	bl	8002f2c <UART_SetConfig>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e022      	b.n	8002940 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fd76 	bl	80033f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fdfd 	bl	8003538 <UART_CheckIdleState>
 800293e:	4603      	mov	r3, r0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0ba      	sub	sp, #232	; 0xe8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800296e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002972:	f640 030f 	movw	r3, #2063	; 0x80f
 8002976:	4013      	ands	r3, r2
 8002978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800297c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d115      	bne.n	80029b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00f      	beq.n	80029b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8297 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
      }
      return;
 80029ae:	e291      	b.n	8002ed4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8117 	beq.w	8002be8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_UART_IRQHandler+0x298>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 810a 	beq.w	8002be8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <HAL_UART_IRQHandler+0xbc>
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2201      	movs	r2, #1
 80029f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d011      	beq.n	8002a34 <HAL_UART_IRQHandler+0xec>
 8002a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2202      	movs	r2, #2
 8002a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d011      	beq.n	8002a64 <HAL_UART_IRQHandler+0x11c>
 8002a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2204      	movs	r2, #4
 8002a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d017      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	f043 0208 	orr.w	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x18a>
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 81fd 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d005      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d04f      	beq.n	8002bca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fe01 	bl	8003732 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d141      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3308      	adds	r3, #8
 8002b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3308      	adds	r3, #8
 8002b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1d9      	bne.n	8002b3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d013      	beq.n	8002bba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <HAL_UART_IRQHandler+0x29c>)
 8002b98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f9b0 	bl	8000f04 <HAL_DMA_Abort_IT>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d017      	beq.n	8002bda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e00f      	b.n	8002bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9a0 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	e00b      	b.n	8002bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f99c 	bl	8002f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	e007      	b.n	8002bda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f998 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002bd8:	e17e      	b.n	8002ed8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bda:	bf00      	nop
    return;
 8002bdc:	e17c      	b.n	8002ed8 <HAL_UART_IRQHandler+0x590>
 8002bde:	bf00      	nop
 8002be0:	04000120 	.word	0x04000120
 8002be4:	080037fb 	.word	0x080037fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 814c 	bne.w	8002e8a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8145 	beq.w	8002e8a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 813e 	beq.w	8002e8a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2210      	movs	r2, #16
 8002c14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	f040 80b6 	bne.w	8002d92 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8150 	beq.w	8002edc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c46:	429a      	cmp	r2, r3
 8002c48:	f080 8148 	bcs.w	8002edc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c60:	f000 8086 	beq.w	8002d70 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1da      	bne.n	8002c64 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cde:	e841 2300 	strex	r3, r2, [r1]
 8002ce2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e1      	bne.n	8002cae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3308      	adds	r3, #8
 8002d0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e3      	bne.n	8002cea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	f023 0310 	bic.w	r3, r3, #16
 8002d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e4      	bne.n	8002d30 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f85a 	bl	8000e24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8c2 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d90:	e0a4      	b.n	8002edc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8096 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8091 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
 8002de2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e4      	bne.n	8002dbe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3308      	adds	r3, #8
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	623b      	str	r3, [r7, #32]
   return(result);
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e18:	633a      	str	r2, [r7, #48]	; 0x30
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e3      	bne.n	8002df4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f023 0310 	bic.w	r3, r3, #16
 8002e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	69b9      	ldr	r1, [r7, #24]
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e4      	bne.n	8002e40 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f846 	bl	8002f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e88:	e02a      	b.n	8002ee0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00e      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01c      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
    }
    return;
 8002eb2:	e017      	b.n	8002ee4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x59e>
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fcaa 	bl	8003826 <UART_EndTransmit_IT>
    return;
 8002ed2:	e008      	b.n	8002ee6 <HAL_UART_IRQHandler+0x59e>
      return;
 8002ed4:	bf00      	nop
 8002ed6:	e006      	b.n	8002ee6 <HAL_UART_IRQHandler+0x59e>
    return;
 8002ed8:	bf00      	nop
 8002eda:	e004      	b.n	8002ee6 <HAL_UART_IRQHandler+0x59e>
      return;
 8002edc:	bf00      	nop
 8002ede:	e002      	b.n	8002ee6 <HAL_UART_IRQHandler+0x59e>
      return;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_IRQHandler+0x59e>
    return;
 8002ee4:	bf00      	nop
  }

}
 8002ee6:	37e8      	adds	r7, #232	; 0xe8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4ba6      	ldr	r3, [pc, #664]	; (80031f0 <UART_SetConfig+0x2c4>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a94      	ldr	r2, [pc, #592]	; (80031f4 <UART_SetConfig+0x2c8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d120      	bne.n	8002fea <UART_SetConfig+0xbe>
 8002fa8:	4b93      	ldr	r3, [pc, #588]	; (80031f8 <UART_SetConfig+0x2cc>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d816      	bhi.n	8002fe4 <UART_SetConfig+0xb8>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <UART_SetConfig+0x90>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fd9 	.word	0x08002fd9
 8002fc4:	08002fd3 	.word	0x08002fd3
 8002fc8:	08002fdf 	.word	0x08002fdf
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e150      	b.n	8003274 <UART_SetConfig+0x348>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e14d      	b.n	8003274 <UART_SetConfig+0x348>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e14a      	b.n	8003274 <UART_SetConfig+0x348>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e147      	b.n	8003274 <UART_SetConfig+0x348>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e144      	b.n	8003274 <UART_SetConfig+0x348>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a83      	ldr	r2, [pc, #524]	; (80031fc <UART_SetConfig+0x2d0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d132      	bne.n	800305a <UART_SetConfig+0x12e>
 8002ff4:	4b80      	ldr	r3, [pc, #512]	; (80031f8 <UART_SetConfig+0x2cc>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d828      	bhi.n	8003054 <UART_SetConfig+0x128>
 8003002:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <UART_SetConfig+0xdc>)
 8003004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003008:	0800303d 	.word	0x0800303d
 800300c:	08003055 	.word	0x08003055
 8003010:	08003055 	.word	0x08003055
 8003014:	08003055 	.word	0x08003055
 8003018:	08003049 	.word	0x08003049
 800301c:	08003055 	.word	0x08003055
 8003020:	08003055 	.word	0x08003055
 8003024:	08003055 	.word	0x08003055
 8003028:	08003043 	.word	0x08003043
 800302c:	08003055 	.word	0x08003055
 8003030:	08003055 	.word	0x08003055
 8003034:	08003055 	.word	0x08003055
 8003038:	0800304f 	.word	0x0800304f
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e118      	b.n	8003274 <UART_SetConfig+0x348>
 8003042:	2302      	movs	r3, #2
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e115      	b.n	8003274 <UART_SetConfig+0x348>
 8003048:	2304      	movs	r3, #4
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e112      	b.n	8003274 <UART_SetConfig+0x348>
 800304e:	2308      	movs	r3, #8
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e10f      	b.n	8003274 <UART_SetConfig+0x348>
 8003054:	2310      	movs	r3, #16
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e10c      	b.n	8003274 <UART_SetConfig+0x348>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a68      	ldr	r2, [pc, #416]	; (8003200 <UART_SetConfig+0x2d4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d120      	bne.n	80030a6 <UART_SetConfig+0x17a>
 8003064:	4b64      	ldr	r3, [pc, #400]	; (80031f8 <UART_SetConfig+0x2cc>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800306e:	2b30      	cmp	r3, #48	; 0x30
 8003070:	d013      	beq.n	800309a <UART_SetConfig+0x16e>
 8003072:	2b30      	cmp	r3, #48	; 0x30
 8003074:	d814      	bhi.n	80030a0 <UART_SetConfig+0x174>
 8003076:	2b20      	cmp	r3, #32
 8003078:	d009      	beq.n	800308e <UART_SetConfig+0x162>
 800307a:	2b20      	cmp	r3, #32
 800307c:	d810      	bhi.n	80030a0 <UART_SetConfig+0x174>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <UART_SetConfig+0x15c>
 8003082:	2b10      	cmp	r3, #16
 8003084:	d006      	beq.n	8003094 <UART_SetConfig+0x168>
 8003086:	e00b      	b.n	80030a0 <UART_SetConfig+0x174>
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e0f2      	b.n	8003274 <UART_SetConfig+0x348>
 800308e:	2302      	movs	r3, #2
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0ef      	b.n	8003274 <UART_SetConfig+0x348>
 8003094:	2304      	movs	r3, #4
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e0ec      	b.n	8003274 <UART_SetConfig+0x348>
 800309a:	2308      	movs	r3, #8
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e0e9      	b.n	8003274 <UART_SetConfig+0x348>
 80030a0:	2310      	movs	r3, #16
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e0e6      	b.n	8003274 <UART_SetConfig+0x348>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a56      	ldr	r2, [pc, #344]	; (8003204 <UART_SetConfig+0x2d8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d120      	bne.n	80030f2 <UART_SetConfig+0x1c6>
 80030b0:	4b51      	ldr	r3, [pc, #324]	; (80031f8 <UART_SetConfig+0x2cc>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030ba:	2bc0      	cmp	r3, #192	; 0xc0
 80030bc:	d013      	beq.n	80030e6 <UART_SetConfig+0x1ba>
 80030be:	2bc0      	cmp	r3, #192	; 0xc0
 80030c0:	d814      	bhi.n	80030ec <UART_SetConfig+0x1c0>
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d009      	beq.n	80030da <UART_SetConfig+0x1ae>
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d810      	bhi.n	80030ec <UART_SetConfig+0x1c0>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <UART_SetConfig+0x1a8>
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d006      	beq.n	80030e0 <UART_SetConfig+0x1b4>
 80030d2:	e00b      	b.n	80030ec <UART_SetConfig+0x1c0>
 80030d4:	2300      	movs	r3, #0
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e0cc      	b.n	8003274 <UART_SetConfig+0x348>
 80030da:	2302      	movs	r3, #2
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e0c9      	b.n	8003274 <UART_SetConfig+0x348>
 80030e0:	2304      	movs	r3, #4
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e0c6      	b.n	8003274 <UART_SetConfig+0x348>
 80030e6:	2308      	movs	r3, #8
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e0c3      	b.n	8003274 <UART_SetConfig+0x348>
 80030ec:	2310      	movs	r3, #16
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e0c0      	b.n	8003274 <UART_SetConfig+0x348>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a44      	ldr	r2, [pc, #272]	; (8003208 <UART_SetConfig+0x2dc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d125      	bne.n	8003148 <UART_SetConfig+0x21c>
 80030fc:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <UART_SetConfig+0x2cc>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800310a:	d017      	beq.n	800313c <UART_SetConfig+0x210>
 800310c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003110:	d817      	bhi.n	8003142 <UART_SetConfig+0x216>
 8003112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003116:	d00b      	beq.n	8003130 <UART_SetConfig+0x204>
 8003118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311c:	d811      	bhi.n	8003142 <UART_SetConfig+0x216>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <UART_SetConfig+0x1fe>
 8003122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003126:	d006      	beq.n	8003136 <UART_SetConfig+0x20a>
 8003128:	e00b      	b.n	8003142 <UART_SetConfig+0x216>
 800312a:	2300      	movs	r3, #0
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e0a1      	b.n	8003274 <UART_SetConfig+0x348>
 8003130:	2302      	movs	r3, #2
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e09e      	b.n	8003274 <UART_SetConfig+0x348>
 8003136:	2304      	movs	r3, #4
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e09b      	b.n	8003274 <UART_SetConfig+0x348>
 800313c:	2308      	movs	r3, #8
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e098      	b.n	8003274 <UART_SetConfig+0x348>
 8003142:	2310      	movs	r3, #16
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e095      	b.n	8003274 <UART_SetConfig+0x348>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2f      	ldr	r2, [pc, #188]	; (800320c <UART_SetConfig+0x2e0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d125      	bne.n	800319e <UART_SetConfig+0x272>
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <UART_SetConfig+0x2cc>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800315c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003160:	d017      	beq.n	8003192 <UART_SetConfig+0x266>
 8003162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003166:	d817      	bhi.n	8003198 <UART_SetConfig+0x26c>
 8003168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316c:	d00b      	beq.n	8003186 <UART_SetConfig+0x25a>
 800316e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003172:	d811      	bhi.n	8003198 <UART_SetConfig+0x26c>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <UART_SetConfig+0x254>
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317c:	d006      	beq.n	800318c <UART_SetConfig+0x260>
 800317e:	e00b      	b.n	8003198 <UART_SetConfig+0x26c>
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e076      	b.n	8003274 <UART_SetConfig+0x348>
 8003186:	2302      	movs	r3, #2
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e073      	b.n	8003274 <UART_SetConfig+0x348>
 800318c:	2304      	movs	r3, #4
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e070      	b.n	8003274 <UART_SetConfig+0x348>
 8003192:	2308      	movs	r3, #8
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e06d      	b.n	8003274 <UART_SetConfig+0x348>
 8003198:	2310      	movs	r3, #16
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e06a      	b.n	8003274 <UART_SetConfig+0x348>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <UART_SetConfig+0x2e4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d138      	bne.n	800321a <UART_SetConfig+0x2ee>
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <UART_SetConfig+0x2cc>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031b6:	d017      	beq.n	80031e8 <UART_SetConfig+0x2bc>
 80031b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031bc:	d82a      	bhi.n	8003214 <UART_SetConfig+0x2e8>
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c2:	d00b      	beq.n	80031dc <UART_SetConfig+0x2b0>
 80031c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c8:	d824      	bhi.n	8003214 <UART_SetConfig+0x2e8>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <UART_SetConfig+0x2aa>
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d006      	beq.n	80031e2 <UART_SetConfig+0x2b6>
 80031d4:	e01e      	b.n	8003214 <UART_SetConfig+0x2e8>
 80031d6:	2300      	movs	r3, #0
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e04b      	b.n	8003274 <UART_SetConfig+0x348>
 80031dc:	2302      	movs	r3, #2
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e048      	b.n	8003274 <UART_SetConfig+0x348>
 80031e2:	2304      	movs	r3, #4
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e045      	b.n	8003274 <UART_SetConfig+0x348>
 80031e8:	2308      	movs	r3, #8
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e042      	b.n	8003274 <UART_SetConfig+0x348>
 80031ee:	bf00      	nop
 80031f0:	efff69f3 	.word	0xefff69f3
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40004400 	.word	0x40004400
 8003200:	40004800 	.word	0x40004800
 8003204:	40004c00 	.word	0x40004c00
 8003208:	40005000 	.word	0x40005000
 800320c:	40011400 	.word	0x40011400
 8003210:	40007800 	.word	0x40007800
 8003214:	2310      	movs	r3, #16
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e02c      	b.n	8003274 <UART_SetConfig+0x348>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a72      	ldr	r2, [pc, #456]	; (80033e8 <UART_SetConfig+0x4bc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d125      	bne.n	8003270 <UART_SetConfig+0x344>
 8003224:	4b71      	ldr	r3, [pc, #452]	; (80033ec <UART_SetConfig+0x4c0>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800322e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003232:	d017      	beq.n	8003264 <UART_SetConfig+0x338>
 8003234:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003238:	d817      	bhi.n	800326a <UART_SetConfig+0x33e>
 800323a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323e:	d00b      	beq.n	8003258 <UART_SetConfig+0x32c>
 8003240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003244:	d811      	bhi.n	800326a <UART_SetConfig+0x33e>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <UART_SetConfig+0x326>
 800324a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324e:	d006      	beq.n	800325e <UART_SetConfig+0x332>
 8003250:	e00b      	b.n	800326a <UART_SetConfig+0x33e>
 8003252:	2300      	movs	r3, #0
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e00d      	b.n	8003274 <UART_SetConfig+0x348>
 8003258:	2302      	movs	r3, #2
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e00a      	b.n	8003274 <UART_SetConfig+0x348>
 800325e:	2304      	movs	r3, #4
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e007      	b.n	8003274 <UART_SetConfig+0x348>
 8003264:	2308      	movs	r3, #8
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e004      	b.n	8003274 <UART_SetConfig+0x348>
 800326a:	2310      	movs	r3, #16
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e001      	b.n	8003274 <UART_SetConfig+0x348>
 8003270:	2310      	movs	r3, #16
 8003272:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327c:	d15b      	bne.n	8003336 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800327e:	7ffb      	ldrb	r3, [r7, #31]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d828      	bhi.n	80032d6 <UART_SetConfig+0x3aa>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <UART_SetConfig+0x360>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032b9 	.word	0x080032b9
 8003294:	080032c1 	.word	0x080032c1
 8003298:	080032d7 	.word	0x080032d7
 800329c:	080032c7 	.word	0x080032c7
 80032a0:	080032d7 	.word	0x080032d7
 80032a4:	080032d7 	.word	0x080032d7
 80032a8:	080032d7 	.word	0x080032d7
 80032ac:	080032cf 	.word	0x080032cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b0:	f7fe fee4 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80032b4:	61b8      	str	r0, [r7, #24]
        break;
 80032b6:	e013      	b.n	80032e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b8:	f7fe fef4 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 80032bc:	61b8      	str	r0, [r7, #24]
        break;
 80032be:	e00f      	b.n	80032e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c0:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <UART_SetConfig+0x4c4>)
 80032c2:	61bb      	str	r3, [r7, #24]
        break;
 80032c4:	e00c      	b.n	80032e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c6:	f7fe fe07 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80032ca:	61b8      	str	r0, [r7, #24]
        break;
 80032cc:	e008      	b.n	80032e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d2:	61bb      	str	r3, [r7, #24]
        break;
 80032d4:	e004      	b.n	80032e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	77bb      	strb	r3, [r7, #30]
        break;
 80032de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d074      	beq.n	80033d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	005a      	lsls	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	085b      	lsrs	r3, r3, #1
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	d916      	bls.n	8003330 <UART_SetConfig+0x404>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003308:	d212      	bcs.n	8003330 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f023 030f 	bic.w	r3, r3, #15
 8003312:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	b29a      	uxth	r2, r3
 8003320:	89fb      	ldrh	r3, [r7, #14]
 8003322:	4313      	orrs	r3, r2
 8003324:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	89fa      	ldrh	r2, [r7, #14]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	e04f      	b.n	80033d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	77bb      	strb	r3, [r7, #30]
 8003334:	e04c      	b.n	80033d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003336:	7ffb      	ldrb	r3, [r7, #31]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d828      	bhi.n	800338e <UART_SetConfig+0x462>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x418>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003369 	.word	0x08003369
 8003348:	08003371 	.word	0x08003371
 800334c:	08003379 	.word	0x08003379
 8003350:	0800338f 	.word	0x0800338f
 8003354:	0800337f 	.word	0x0800337f
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800338f 	.word	0x0800338f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7fe fe88 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 800336c:	61b8      	str	r0, [r7, #24]
        break;
 800336e:	e013      	b.n	8003398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7fe fe98 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003374:	61b8      	str	r0, [r7, #24]
        break;
 8003376:	e00f      	b.n	8003398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <UART_SetConfig+0x4c4>)
 800337a:	61bb      	str	r3, [r7, #24]
        break;
 800337c:	e00c      	b.n	8003398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe fdab 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8003382:	61b8      	str	r0, [r7, #24]
        break;
 8003384:	e008      	b.n	8003398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	61bb      	str	r3, [r7, #24]
        break;
 800338c:	e004      	b.n	8003398 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	77bb      	strb	r3, [r7, #30]
        break;
 8003396:	bf00      	nop
    }

    if (pclk != 0U)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	085a      	lsrs	r2, r3, #1
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	441a      	add	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d909      	bls.n	80033cc <UART_SetConfig+0x4a0>
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d205      	bcs.n	80033cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	e001      	b.n	80033d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40007c00 	.word	0x40007c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	00f42400 	.word	0x00f42400

080033f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01a      	beq.n	800350a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f2:	d10a      	bne.n	800350a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003548:	f7fd faa0 	bl	8000a8c <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b08      	cmp	r3, #8
 800355a:	d10e      	bne.n	800357a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800355c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f81b 	bl	80035a6 <UART_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e011      	b.n	800359e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b09c      	sub	sp, #112	; 0x70
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	e0a7      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	f000 80a3 	beq.w	8003708 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fd fa63 	bl	8000a8c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80035d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d13f      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ec:	667b      	str	r3, [r7, #100]	; 0x64
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e6      	bne.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3308      	adds	r3, #8
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	663b      	str	r3, [r7, #96]	; 0x60
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3308      	adds	r3, #8
 8003628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800362a:	64ba      	str	r2, [r7, #72]	; 0x48
 800362c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e068      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d050      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003674:	d148      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
 80036a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e6      	bne.n	8003680 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3308      	adds	r3, #8
 80036b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	613b      	str	r3, [r7, #16]
   return(result);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3308      	adds	r3, #8
 80036d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036d2:	623a      	str	r2, [r7, #32]
 80036d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	69f9      	ldr	r1, [r7, #28]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e5      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e010      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	f43f af48 	beq.w	80035b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3770      	adds	r7, #112	; 0x70
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003732:	b480      	push	{r7}
 8003734:	b095      	sub	sp, #84	; 0x54
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003758:	643b      	str	r3, [r7, #64]	; 0x40
 800375a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800375e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e6      	bne.n	800373a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3308      	adds	r3, #8
 8003772:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	61fb      	str	r3, [r7, #28]
   return(result);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800378c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d118      	bne.n	80037da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f023 0310 	bic.w	r3, r3, #16
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6979      	ldr	r1, [r7, #20]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	613b      	str	r3, [r7, #16]
   return(result);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e6      	bne.n	80037a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037ee:	bf00      	nop
 80037f0:	3754      	adds	r7, #84	; 0x54
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fb71 	bl	8002f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b088      	sub	sp, #32
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	60bb      	str	r3, [r7, #8]
   return(result);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6979      	ldr	r1, [r7, #20]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	613b      	str	r3, [r7, #16]
   return(result);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e6      	bne.n	800382e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff fb3d 	bl	8002eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003872:	bf00      	nop
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4d0d      	ldr	r5, [pc, #52]	; (80038b4 <__libc_init_array+0x38>)
 8003880:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <__libc_init_array+0x3c>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	2600      	movs	r6, #0
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	4d0b      	ldr	r5, [pc, #44]	; (80038bc <__libc_init_array+0x40>)
 800388e:	4c0c      	ldr	r4, [pc, #48]	; (80038c0 <__libc_init_array+0x44>)
 8003890:	f000 f820 	bl	80038d4 <_init>
 8003894:	1b64      	subs	r4, r4, r5
 8003896:	10a4      	asrs	r4, r4, #2
 8003898:	2600      	movs	r6, #0
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	08003914 	.word	0x08003914
 80038b8:	08003914 	.word	0x08003914
 80038bc:	08003914 	.word	0x08003914
 80038c0:	08003918 	.word	0x08003918

080038c4 <memset>:
 80038c4:	4402      	add	r2, r0
 80038c6:	4603      	mov	r3, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <_init>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr

080038e0 <_fini>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr
